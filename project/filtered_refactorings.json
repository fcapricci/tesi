{
  "commits": [
    {
      "repository": "https://github.com/jgrapht/jgrapht.git",
      "sha1": "082da1507692b20f6caeab16a763649c2c87c518",
      "url": "https://github.com/jgrapht/jgrapht/commit/082da1507692b20f6caeab16a763649c2c87c518",
      "refactorings": [
        {
          "type": "Rename Method",
          "description": "Rename Method public calculateMaximumFlow(source V, sink V) : double renamed to public getMaximumFlowValue(source V, sink V) : double in class org.jgrapht.alg.flow.GusfieldEquivalentFlowTree",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/flow/GusfieldEquivalentFlowTree.java",
              "startLine": 194,
              "endLine": 213,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public calculateMaximumFlow(source V, sink V) : double"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/flow/GusfieldEquivalentFlowTree.java",
              "startLine": 194,
              "endLine": 213,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "renamed method declaration",
              "codeElement": "public getMaximumFlowValue(source V, sink V) : double"
            }
          ]
        },
        {
          "type": "Rename Method",
          "description": "Rename Method public calculateMaximumFlow(source V, sink V) : double renamed to public getMaximumFlowValue(source V, sink V) : double in class org.jgrapht.alg.flow.GusfieldGomoryHuCutTree",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/flow/GusfieldGomoryHuCutTree.java",
              "startLine": 212,
              "endLine": 233,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public calculateMaximumFlow(source V, sink V) : double"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/flow/GusfieldGomoryHuCutTree.java",
              "startLine": 212,
              "endLine": 233,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "renamed method declaration",
              "codeElement": "public getMaximumFlowValue(source V, sink V) : double"
            }
          ]
        }
      ]
    },
    {
      "repository": "https://github.com/jgrapht/jgrapht.git",
      "sha1": "f9c2bc014518e25fc9af83be5815806672bf1548",
      "url": "https://github.com/jgrapht/jgrapht/commit/f9c2bc014518e25fc9af83be5815806672bf1548",
      "refactorings": [
        {
          "type": "Change Method Access Modifier",
          "description": "Change Method Access Modifier private to protected in method protected initialize(g Graph<V,E>) : void from class org.jgrapht.alg.cycle.HierholzerEulerianCycle",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HierholzerEulerianCycle.java",
              "startLine": 202,
              "endLine": 233,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "private initialize(g Graph<V,E>) : void"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HierholzerEulerianCycle.java",
              "startLine": 202,
              "endLine": 233,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with changed access modifier",
              "codeElement": "protected initialize(g Graph<V,E>) : void"
            }
          ]
        },
        {
          "type": "Change Method Access Modifier",
          "description": "Change Method Access Modifier private to protected in method protected cleanup() : void from class org.jgrapht.alg.cycle.HierholzerEulerianCycle",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HierholzerEulerianCycle.java",
              "startLine": 235,
              "endLine": 244,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "private cleanup() : void"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HierholzerEulerianCycle.java",
              "startLine": 235,
              "endLine": 244,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with changed access modifier",
              "codeElement": "protected cleanup() : void"
            }
          ]
        },
        {
          "type": "Change Method Access Modifier",
          "description": "Change Method Access Modifier private to protected in method protected computePartialCycle() : Pair<EdgeNode,EdgeNode> from class org.jgrapht.alg.cycle.HierholzerEulerianCycle",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HierholzerEulerianCycle.java",
              "startLine": 246,
              "endLine": 275,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "private computePartialCycle() : Pair<EdgeNode,EdgeNode>"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HierholzerEulerianCycle.java",
              "startLine": 246,
              "endLine": 275,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with changed access modifier",
              "codeElement": "protected computePartialCycle() : Pair<EdgeNode,EdgeNode>"
            }
          ]
        },
        {
          "type": "Change Method Access Modifier",
          "description": "Change Method Access Modifier private to protected in method protected updateGraphAndInsertLocations(partialCycle Pair<EdgeNode,EdgeNode>, partialCycleSourceVertex VertexNode) : void from class org.jgrapht.alg.cycle.HierholzerEulerianCycle",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HierholzerEulerianCycle.java",
              "startLine": 277,
              "endLine": 306,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "private updateGraphAndInsertLocations(partialCycle Pair<EdgeNode,EdgeNode>, partialCycleSourceVertex VertexNode) : void"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HierholzerEulerianCycle.java",
              "startLine": 277,
              "endLine": 306,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with changed access modifier",
              "codeElement": "protected updateGraphAndInsertLocations(partialCycle Pair<EdgeNode,EdgeNode>, partialCycleSourceVertex VertexNode) : void"
            }
          ]
        },
        {
          "type": "Change Method Access Modifier",
          "description": "Change Method Access Modifier private to protected in method protected buildWalk() : GraphWalk<V,E> from class org.jgrapht.alg.cycle.HierholzerEulerianCycle",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HierholzerEulerianCycle.java",
              "startLine": 308,
              "endLine": 325,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "private buildWalk() : GraphWalk<V,E>"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HierholzerEulerianCycle.java",
              "startLine": 308,
              "endLine": 325,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with changed access modifier",
              "codeElement": "protected buildWalk() : GraphWalk<V,E>"
            }
          ]
        },
        {
          "type": "Change Method Access Modifier",
          "description": "Change Method Access Modifier private to protected in method protected addEdge(sNode VertexNode, tNode VertexNode, e E) : void from class org.jgrapht.alg.cycle.HierholzerEulerianCycle",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HierholzerEulerianCycle.java",
              "startLine": 330,
              "endLine": 355,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "private addEdge(sNode VertexNode, tNode VertexNode, e E) : void"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HierholzerEulerianCycle.java",
              "startLine": 327,
              "endLine": 359,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with changed access modifier",
              "codeElement": "protected addEdge(sNode VertexNode, tNode VertexNode, e E) : void"
            }
          ]
        },
        {
          "type": "Change Method Access Modifier",
          "description": "Change Method Access Modifier private to protected in method protected unlink(vNode VertexNode) : void from class org.jgrapht.alg.cycle.HierholzerEulerianCycle",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HierholzerEulerianCycle.java",
              "startLine": 360,
              "endLine": 380,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "private unlink(vNode VertexNode) : void"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HierholzerEulerianCycle.java",
              "startLine": 361,
              "endLine": 386,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with changed access modifier",
              "codeElement": "protected unlink(vNode VertexNode) : void"
            }
          ]
        },
        {
          "type": "Change Method Access Modifier",
          "description": "Change Method Access Modifier private to protected in method protected moveToFront(vNode VertexNode) : void from class org.jgrapht.alg.cycle.HierholzerEulerianCycle",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HierholzerEulerianCycle.java",
              "startLine": 385,
              "endLine": 397,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "private moveToFront(vNode VertexNode) : void"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HierholzerEulerianCycle.java",
              "startLine": 388,
              "endLine": 405,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with changed access modifier",
              "codeElement": "protected moveToFront(vNode VertexNode) : void"
            }
          ]
        },
        {
          "type": "Change Method Access Modifier",
          "description": "Change Method Access Modifier private to protected in method protected unlink(eNode EdgeNode) : void from class org.jgrapht.alg.cycle.HierholzerEulerianCycle",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HierholzerEulerianCycle.java",
              "startLine": 402,
              "endLine": 438,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "private unlink(eNode EdgeNode) : void"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HierholzerEulerianCycle.java",
              "startLine": 407,
              "endLine": 448,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with changed access modifier",
              "codeElement": "protected unlink(eNode EdgeNode) : void"
            }
          ]
        },
        {
          "type": "Change Method Access Modifier",
          "description": "Change Method Access Modifier private to protected in method protected getOppositeVertex(v VertexNode, e EdgeNode) : VertexNode from class org.jgrapht.alg.cycle.HierholzerEulerianCycle",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HierholzerEulerianCycle.java",
              "startLine": 443,
              "endLine": 446,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "private getOppositeVertex(v VertexNode, e EdgeNode) : VertexNode"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HierholzerEulerianCycle.java",
              "startLine": 450,
              "endLine": 460,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with changed access modifier",
              "codeElement": "protected getOppositeVertex(v VertexNode, e EdgeNode) : VertexNode"
            }
          ]
        },
        {
          "type": "Change Method Access Modifier",
          "description": "Change Method Access Modifier package to public in method public EdgeNode(sourceNode VertexNode, targetNode VertexNode, prev EdgeNode, e E, reverse EdgeNode, next EdgeNode) from class org.jgrapht.alg.cycle.HierholzerEulerianCycle.EdgeNode",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HierholzerEulerianCycle.java",
              "startLine": 523,
              "endLine": 533,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "package EdgeNode(sourceNode VertexNode, targetNode VertexNode, prev EdgeNode, e E, reverse EdgeNode, next EdgeNode)"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HierholzerEulerianCycle.java",
              "startLine": 544,
              "endLine": 564,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with changed access modifier",
              "codeElement": "public EdgeNode(sourceNode VertexNode, targetNode VertexNode, prev EdgeNode, e E, reverse EdgeNode, next EdgeNode)"
            }
          ]
        },
        {
          "type": "Change Method Access Modifier",
          "description": "Change Method Access Modifier package to public in method public VertexNode(prev VertexNode, v V, next VertexNode) from class org.jgrapht.alg.cycle.HierholzerEulerianCycle.VertexNode",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HierholzerEulerianCycle.java",
              "startLine": 466,
              "endLine": 473,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "package VertexNode(prev VertexNode, v V, next VertexNode)"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HierholzerEulerianCycle.java",
              "startLine": 480,
              "endLine": 494,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with changed access modifier",
              "codeElement": "public VertexNode(prev VertexNode, v V, next VertexNode)"
            }
          ]
        }
      ]
    },
    {
      "repository": "https://github.com/jgrapht/jgrapht.git",
      "sha1": "bd2661d286f4e02ce3d67cc24642835862c29f90",
      "url": "https://github.com/jgrapht/jgrapht/commit/bd2661d286f4e02ce3d67cc24642835862c29f90",
      "refactorings": [
        {
          "type": "Add Method Annotation",
          "description": "Add Method Annotation @Deprecated in method public addEdgeToTouchingVertices(e E) : void from class org.jgrapht.graph.specifics.DirectedSpecifics",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/DirectedSpecifics.java",
              "startLine": 136,
              "endLine": 147,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public addEdgeToTouchingVertices(e E) : void"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/DirectedSpecifics.java",
              "startLine": 138,
              "endLine": 138,
              "startColumn": 5,
              "endColumn": 16,
              "codeElementType": "ANNOTATION",
              "description": "added annotation",
              "codeElement": "@Deprecated"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/DirectedSpecifics.java",
              "startLine": 137,
              "endLine": 145,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with added annotation",
              "codeElement": "public addEdgeToTouchingVertices(e E) : void"
            }
          ]
        },
        {
          "type": "Add Method Annotation",
          "description": "Add Method Annotation @Deprecated in method public removeEdgeFromTouchingVertices(e E) : void from class org.jgrapht.graph.specifics.DirectedSpecifics",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/DirectedSpecifics.java",
              "startLine": 218,
              "endLine": 229,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public removeEdgeFromTouchingVertices(e E) : void"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/DirectedSpecifics.java",
              "startLine": 269,
              "endLine": 269,
              "startColumn": 5,
              "endColumn": 16,
              "codeElementType": "ANNOTATION",
              "description": "added annotation",
              "codeElement": "@Deprecated"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/DirectedSpecifics.java",
              "startLine": 264,
              "endLine": 277,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with added annotation",
              "codeElement": "public removeEdgeFromTouchingVertices(e E) : void"
            }
          ]
        },
        {
          "type": "Rename Method",
          "description": "Rename Method public addEdgeToTouchingVertices(e E) : void renamed to protected addToIndex(sourceVertex V, targetVertex V, e E) : void in class org.jgrapht.graph.specifics.FastLookupDirectedSpecifics",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupDirectedSpecifics.java",
              "startLine": 101,
              "endLine": 122,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public addEdgeToTouchingVertices(e E) : void"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupDirectedSpecifics.java",
              "startLine": 155,
              "endLine": 173,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "renamed method declaration",
              "codeElement": "protected addToIndex(sourceVertex V, targetVertex V, e E) : void"
            }
          ]
        },
        {
          "type": "Extract Method",
          "description": "Extract Method protected removeFromIndex(sourceVertex V, targetVertex V, e E) : void extracted from public removeEdgeFromTouchingVertices(e E) : void in class org.jgrapht.graph.specifics.FastLookupDirectedSpecifics",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupDirectedSpecifics.java",
              "startLine": 124,
              "endLine": 148,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public removeEdgeFromTouchingVertices(e E) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupDirectedSpecifics.java",
              "startLine": 140,
              "endLine": 140,
              "startColumn": 9,
              "endColumn": 60,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupDirectedSpecifics.java",
              "startLine": 141,
              "endLine": 141,
              "startColumn": 9,
              "endColumn": 68,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupDirectedSpecifics.java",
              "startLine": 143,
              "endLine": 143,
              "startColumn": 13,
              "endColumn": 31,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupDirectedSpecifics.java",
              "startLine": 145,
              "endLine": 145,
              "startColumn": 17,
              "endColumn": 62,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupDirectedSpecifics.java",
              "startLine": 144,
              "endLine": 146,
              "startColumn": 13,
              "endColumn": 14,
              "codeElementType": "IF_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupDirectedSpecifics.java",
              "startLine": 142,
              "endLine": 147,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "IF_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupDirectedSpecifics.java",
              "startLine": 144,
              "endLine": 146,
              "startColumn": 36,
              "endColumn": 14,
              "codeElementType": "BLOCK",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupDirectedSpecifics.java",
              "startLine": 142,
              "endLine": 147,
              "startColumn": 30,
              "endColumn": 10,
              "codeElementType": "BLOCK",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupDirectedSpecifics.java",
              "startLine": 175,
              "endLine": 192,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "protected removeFromIndex(sourceVertex V, targetVertex V, e E) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupDirectedSpecifics.java",
              "startLine": 184,
              "endLine": 184,
              "startColumn": 9,
              "endColumn": 72,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupDirectedSpecifics.java",
              "startLine": 185,
              "endLine": 185,
              "startColumn": 9,
              "endColumn": 68,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupDirectedSpecifics.java",
              "startLine": 187,
              "endLine": 187,
              "startColumn": 13,
              "endColumn": 31,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupDirectedSpecifics.java",
              "startLine": 189,
              "endLine": 189,
              "startColumn": 17,
              "endColumn": 62,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupDirectedSpecifics.java",
              "startLine": 188,
              "endLine": 190,
              "startColumn": 13,
              "endColumn": 14,
              "codeElementType": "IF_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupDirectedSpecifics.java",
              "startLine": 186,
              "endLine": 191,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "IF_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupDirectedSpecifics.java",
              "startLine": 188,
              "endLine": 190,
              "startColumn": 36,
              "endColumn": 14,
              "codeElementType": "BLOCK",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupDirectedSpecifics.java",
              "startLine": 186,
              "endLine": 191,
              "startColumn": 30,
              "endColumn": 10,
              "codeElementType": "BLOCK",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupDirectedSpecifics.java",
              "startLine": 136,
              "endLine": 145,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public removeEdgeFromTouchingVertices(e E) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupDirectedSpecifics.java",
              "startLine": 144,
              "endLine": 144,
              "startColumn": 9,
              "endColumn": 43,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "removeFromIndex(source,target,e)"
            }
          ]
        },
        {
          "type": "Add Method Annotation",
          "description": "Add Method Annotation @Deprecated in method public removeEdgeFromTouchingVertices(e E) : void from class org.jgrapht.graph.specifics.FastLookupDirectedSpecifics",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupDirectedSpecifics.java",
              "startLine": 124,
              "endLine": 148,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public removeEdgeFromTouchingVertices(e E) : void"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupDirectedSpecifics.java",
              "startLine": 137,
              "endLine": 137,
              "startColumn": 5,
              "endColumn": 16,
              "codeElementType": "ANNOTATION",
              "description": "added annotation",
              "codeElement": "@Deprecated"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupDirectedSpecifics.java",
              "startLine": 136,
              "endLine": 145,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with added annotation",
              "codeElement": "public removeEdgeFromTouchingVertices(e E) : void"
            }
          ]
        },
        {
          "type": "Remove Method Annotation",
          "description": "Remove Method Annotation @Override in method public addEdgeToTouchingVertices(e E) : void from class org.jgrapht.graph.specifics.FastLookupDirectedSpecifics",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupDirectedSpecifics.java",
              "startLine": 104,
              "endLine": 104,
              "startColumn": 5,
              "endColumn": 14,
              "codeElementType": "ANNOTATION",
              "description": "removed annotation",
              "codeElement": "@Override"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupDirectedSpecifics.java",
              "startLine": 101,
              "endLine": 122,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public addEdgeToTouchingVertices(e E) : void"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupDirectedSpecifics.java",
              "startLine": 155,
              "endLine": 173,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with removed annotation",
              "codeElement": "protected addToIndex(sourceVertex V, targetVertex V, e E) : void"
            }
          ]
        },
        {
          "type": "Change Method Access Modifier",
          "description": "Change Method Access Modifier public to protected in method protected addToIndex(sourceVertex V, targetVertex V, e E) : void from class org.jgrapht.graph.specifics.FastLookupDirectedSpecifics",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupDirectedSpecifics.java",
              "startLine": 101,
              "endLine": 122,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public addEdgeToTouchingVertices(e E) : void"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupDirectedSpecifics.java",
              "startLine": 155,
              "endLine": 173,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with changed access modifier",
              "codeElement": "protected addToIndex(sourceVertex V, targetVertex V, e E) : void"
            }
          ]
        },
        {
          "type": "Rename Method",
          "description": "Rename Method public addEdgeToTouchingVertices(e E) : void renamed to protected addToIndex(sourceVertex V, targetVertex V, e E) : void in class org.jgrapht.graph.specifics.FastLookupUndirectedSpecifics",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupUndirectedSpecifics.java",
              "startLine": 102,
              "endLine": 127,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public addEdgeToTouchingVertices(e E) : void"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupUndirectedSpecifics.java",
              "startLine": 157,
              "endLine": 175,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "renamed method declaration",
              "codeElement": "protected addToIndex(sourceVertex V, targetVertex V, e E) : void"
            }
          ]
        },
        {
          "type": "Extract Method",
          "description": "Extract Method protected removeFromIndex(sourceVertex V, targetVertex V, e E) : void extracted from public removeEdgeFromTouchingVertices(e E) : void in class org.jgrapht.graph.specifics.FastLookupUndirectedSpecifics",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupUndirectedSpecifics.java",
              "startLine": 129,
              "endLine": 154,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public removeEdgeFromTouchingVertices(e E) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupUndirectedSpecifics.java",
              "startLine": 147,
              "endLine": 147,
              "startColumn": 9,
              "endColumn": 69,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupUndirectedSpecifics.java",
              "startLine": 148,
              "endLine": 148,
              "startColumn": 9,
              "endColumn": 68,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupUndirectedSpecifics.java",
              "startLine": 150,
              "endLine": 150,
              "startColumn": 13,
              "endColumn": 31,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupUndirectedSpecifics.java",
              "startLine": 152,
              "endLine": 152,
              "startColumn": 17,
              "endColumn": 62,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupUndirectedSpecifics.java",
              "startLine": 151,
              "endLine": 152,
              "startColumn": 13,
              "endColumn": 62,
              "codeElementType": "IF_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupUndirectedSpecifics.java",
              "startLine": 149,
              "endLine": 153,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "IF_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupUndirectedSpecifics.java",
              "startLine": 149,
              "endLine": 153,
              "startColumn": 30,
              "endColumn": 10,
              "codeElementType": "BLOCK",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupUndirectedSpecifics.java",
              "startLine": 177,
              "endLine": 193,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "protected removeFromIndex(sourceVertex V, targetVertex V, e E) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupUndirectedSpecifics.java",
              "startLine": 186,
              "endLine": 186,
              "startColumn": 9,
              "endColumn": 81,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupUndirectedSpecifics.java",
              "startLine": 187,
              "endLine": 187,
              "startColumn": 9,
              "endColumn": 68,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupUndirectedSpecifics.java",
              "startLine": 189,
              "endLine": 189,
              "startColumn": 13,
              "endColumn": 31,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupUndirectedSpecifics.java",
              "startLine": 191,
              "endLine": 191,
              "startColumn": 17,
              "endColumn": 62,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupUndirectedSpecifics.java",
              "startLine": 190,
              "endLine": 191,
              "startColumn": 13,
              "endColumn": 62,
              "codeElementType": "IF_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupUndirectedSpecifics.java",
              "startLine": 188,
              "endLine": 192,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "IF_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupUndirectedSpecifics.java",
              "startLine": 188,
              "endLine": 192,
              "startColumn": 30,
              "endColumn": 10,
              "codeElementType": "BLOCK",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupUndirectedSpecifics.java",
              "startLine": 138,
              "endLine": 147,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public removeEdgeFromTouchingVertices(e E) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupUndirectedSpecifics.java",
              "startLine": 146,
              "endLine": 146,
              "startColumn": 9,
              "endColumn": 43,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "removeFromIndex(source,target,e)"
            }
          ]
        },
        {
          "type": "Add Method Annotation",
          "description": "Add Method Annotation @Deprecated in method public removeEdgeFromTouchingVertices(e E) : void from class org.jgrapht.graph.specifics.FastLookupUndirectedSpecifics",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupUndirectedSpecifics.java",
              "startLine": 129,
              "endLine": 154,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public removeEdgeFromTouchingVertices(e E) : void"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupUndirectedSpecifics.java",
              "startLine": 139,
              "endLine": 139,
              "startColumn": 5,
              "endColumn": 16,
              "codeElementType": "ANNOTATION",
              "description": "added annotation",
              "codeElement": "@Deprecated"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupUndirectedSpecifics.java",
              "startLine": 138,
              "endLine": 147,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with added annotation",
              "codeElement": "public removeEdgeFromTouchingVertices(e E) : void"
            }
          ]
        },
        {
          "type": "Remove Method Annotation",
          "description": "Remove Method Annotation @Override in method public addEdgeToTouchingVertices(e E) : void from class org.jgrapht.graph.specifics.FastLookupUndirectedSpecifics",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupUndirectedSpecifics.java",
              "startLine": 105,
              "endLine": 105,
              "startColumn": 5,
              "endColumn": 14,
              "codeElementType": "ANNOTATION",
              "description": "removed annotation",
              "codeElement": "@Override"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupUndirectedSpecifics.java",
              "startLine": 102,
              "endLine": 127,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public addEdgeToTouchingVertices(e E) : void"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupUndirectedSpecifics.java",
              "startLine": 157,
              "endLine": 175,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with removed annotation",
              "codeElement": "protected addToIndex(sourceVertex V, targetVertex V, e E) : void"
            }
          ]
        },
        {
          "type": "Change Method Access Modifier",
          "description": "Change Method Access Modifier public to protected in method protected addToIndex(sourceVertex V, targetVertex V, e E) : void from class org.jgrapht.graph.specifics.FastLookupUndirectedSpecifics",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupUndirectedSpecifics.java",
              "startLine": 102,
              "endLine": 127,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public addEdgeToTouchingVertices(e E) : void"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/FastLookupUndirectedSpecifics.java",
              "startLine": 157,
              "endLine": 175,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with changed access modifier",
              "codeElement": "protected addToIndex(sourceVertex V, targetVertex V, e E) : void"
            }
          ]
        },
        {
          "type": "Add Method Annotation",
          "description": "Add Method Annotation @Deprecated in method public addEdgeToTouchingVertices(e E) : void from class org.jgrapht.graph.specifics.Specifics",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/Specifics.java",
              "startLine": 77,
              "endLine": 82,
              "startColumn": 5,
              "endColumn": 41,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public addEdgeToTouchingVertices(e E) : void"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/Specifics.java",
              "startLine": 84,
              "endLine": 84,
              "startColumn": 5,
              "endColumn": 16,
              "codeElementType": "ANNOTATION",
              "description": "added annotation",
              "codeElement": "@Deprecated"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/Specifics.java",
              "startLine": 78,
              "endLine": 85,
              "startColumn": 5,
              "endColumn": 41,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with added annotation",
              "codeElement": "public addEdgeToTouchingVertices(e E) : void"
            }
          ]
        },
        {
          "type": "Add Method Annotation",
          "description": "Add Method Annotation @Deprecated in method public removeEdgeFromTouchingVertices(e E) : void from class org.jgrapht.graph.specifics.Specifics",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/Specifics.java",
              "startLine": 136,
              "endLine": 141,
              "startColumn": 5,
              "endColumn": 46,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public removeEdgeFromTouchingVertices(e E) : void"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/Specifics.java",
              "startLine": 180,
              "endLine": 180,
              "startColumn": 5,
              "endColumn": 16,
              "codeElementType": "ANNOTATION",
              "description": "added annotation",
              "codeElement": "@Deprecated"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/Specifics.java",
              "startLine": 174,
              "endLine": 181,
              "startColumn": 5,
              "endColumn": 46,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with added annotation",
              "codeElement": "public removeEdgeFromTouchingVertices(e E) : void"
            }
          ]
        },
        {
          "type": "Add Method Annotation",
          "description": "Add Method Annotation @Deprecated in method public addEdgeToTouchingVertices(e E) : void from class org.jgrapht.graph.specifics.UndirectedSpecifics",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/UndirectedSpecifics.java",
              "startLine": 144,
              "endLine": 158,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public addEdgeToTouchingVertices(e E) : void"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/UndirectedSpecifics.java",
              "startLine": 146,
              "endLine": 146,
              "startColumn": 5,
              "endColumn": 16,
              "codeElementType": "ANNOTATION",
              "description": "added annotation",
              "codeElement": "@Deprecated"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/UndirectedSpecifics.java",
              "startLine": 145,
              "endLine": 156,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with added annotation",
              "codeElement": "public addEdgeToTouchingVertices(e E) : void"
            }
          ]
        },
        {
          "type": "Add Method Annotation",
          "description": "Add Method Annotation @Deprecated in method public removeEdgeFromTouchingVertices(e E) : void from class org.jgrapht.graph.specifics.UndirectedSpecifics",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/UndirectedSpecifics.java",
              "startLine": 232,
              "endLine": 246,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public removeEdgeFromTouchingVertices(e E) : void"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/UndirectedSpecifics.java",
              "startLine": 283,
              "endLine": 283,
              "startColumn": 5,
              "endColumn": 16,
              "codeElementType": "ANNOTATION",
              "description": "added annotation",
              "codeElement": "@Deprecated"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/specifics/UndirectedSpecifics.java",
              "startLine": 278,
              "endLine": 294,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with added annotation",
              "codeElement": "public removeEdgeFromTouchingVertices(e E) : void"
            }
          ]
        }
      ]
    },
    {
      "repository": "https://github.com/jgrapht/jgrapht.git",
      "sha1": "597297c0c57613c20f1f9755e2acc6713c502553",
      "url": "https://github.com/jgrapht/jgrapht/commit/597297c0c57613c20f1f9755e2acc6713c502553",
      "refactorings": [
        {
          "type": "Change Return Type",
          "description": "Change Return Type Graph<URL,DefaultEdge> to Graph<URI,DefaultEdge> in method private createHrefGraph() : Graph<URI,DefaultEdge> from class org.jgrapht.demo.HelloJGraphT",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-demo/src/main/java/org/jgrapht/demo/HelloJGraphT.java",
              "startLine": 98,
              "endLine": 98,
              "startColumn": 20,
              "endColumn": 43,
              "codeElementType": "TYPE",
              "description": "original return type",
              "codeElement": "Graph<URL,DefaultEdge>"
            },
            {
              "filePath": "jgrapht-demo/src/main/java/org/jgrapht/demo/HelloJGraphT.java",
              "startLine": 93,
              "endLine": 123,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "private createHrefGraph() : Graph<URL,DefaultEdge>"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-demo/src/main/java/org/jgrapht/demo/HelloJGraphT.java",
              "startLine": 98,
              "endLine": 98,
              "startColumn": 20,
              "endColumn": 43,
              "codeElementType": "TYPE",
              "description": "changed return type",
              "codeElement": "Graph<URI,DefaultEdge>"
            },
            {
              "filePath": "jgrapht-demo/src/main/java/org/jgrapht/demo/HelloJGraphT.java",
              "startLine": 93,
              "endLine": 123,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with changed return type",
              "codeElement": "private createHrefGraph() : Graph<URI,DefaultEdge>"
            }
          ]
        },
        {
          "type": "Change Parameter Type",
          "description": "Change Parameter Type hrefGraph : Graph<URL,DefaultEdge> to hrefGraph : Graph<URI,DefaultEdge> in method private traverseHrefGraph(hrefGraph Graph<URI,DefaultEdge>, start URI) : void from class org.jgrapht.demo.HelloJGraphT",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-demo/src/main/java/org/jgrapht/demo/HelloJGraphT.java",
              "startLine": 132,
              "endLine": 132,
              "startColumn": 43,
              "endColumn": 76,
              "codeElementType": "SINGLE_VARIABLE_DECLARATION",
              "description": "original variable declaration",
              "codeElement": "hrefGraph : Graph<URL,DefaultEdge>"
            },
            {
              "filePath": "jgrapht-demo/src/main/java/org/jgrapht/demo/HelloJGraphT.java",
              "startLine": 135,
              "endLine": 135,
              "startColumn": 9,
              "endColumn": 77,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "statement referencing the original variable",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-demo/src/main/java/org/jgrapht/demo/HelloJGraphT.java",
              "startLine": 132,
              "endLine": 132,
              "startColumn": 43,
              "endColumn": 76,
              "codeElementType": "SINGLE_VARIABLE_DECLARATION",
              "description": "changed-type variable declaration",
              "codeElement": "hrefGraph : Graph<URI,DefaultEdge>"
            },
            {
              "filePath": "jgrapht-demo/src/main/java/org/jgrapht/demo/HelloJGraphT.java",
              "startLine": 135,
              "endLine": 135,
              "startColumn": 9,
              "endColumn": 77,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "statement referencing the variable with changed type",
              "codeElement": null
            }
          ]
        },
        {
          "type": "Change Parameter Type",
          "description": "Change Parameter Type start : URL to start : URI in method private traverseHrefGraph(hrefGraph Graph<URI,DefaultEdge>, start URI) : void from class org.jgrapht.demo.HelloJGraphT",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-demo/src/main/java/org/jgrapht/demo/HelloJGraphT.java",
              "startLine": 132,
              "endLine": 132,
              "startColumn": 78,
              "endColumn": 87,
              "codeElementType": "SINGLE_VARIABLE_DECLARATION",
              "description": "original variable declaration",
              "codeElement": "start : URL"
            },
            {
              "filePath": "jgrapht-demo/src/main/java/org/jgrapht/demo/HelloJGraphT.java",
              "startLine": 135,
              "endLine": 135,
              "startColumn": 9,
              "endColumn": 77,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "statement referencing the original variable",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-demo/src/main/java/org/jgrapht/demo/HelloJGraphT.java",
              "startLine": 132,
              "endLine": 132,
              "startColumn": 78,
              "endColumn": 87,
              "codeElementType": "SINGLE_VARIABLE_DECLARATION",
              "description": "changed-type variable declaration",
              "codeElement": "start : URI"
            },
            {
              "filePath": "jgrapht-demo/src/main/java/org/jgrapht/demo/HelloJGraphT.java",
              "startLine": 135,
              "endLine": 135,
              "startColumn": 9,
              "endColumn": 77,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "statement referencing the variable with changed type",
              "codeElement": null
            }
          ]
        },
        {
          "type": "Change Parameter Type",
          "description": "Change Parameter Type hrefGraph : Graph<URL,DefaultEdge> to hrefGraph : Graph<URI,DefaultEdge> in method private renderHrefGraph(hrefGraph Graph<URI,DefaultEdge>) : void from class org.jgrapht.demo.HelloJGraphT",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-demo/src/main/java/org/jgrapht/demo/HelloJGraphT.java",
              "startLine": 148,
              "endLine": 148,
              "startColumn": 41,
              "endColumn": 74,
              "codeElementType": "SINGLE_VARIABLE_DECLARATION",
              "description": "original variable declaration",
              "codeElement": "hrefGraph : Graph<URL,DefaultEdge>"
            },
            {
              "filePath": "jgrapht-demo/src/main/java/org/jgrapht/demo/HelloJGraphT.java",
              "startLine": 172,
              "endLine": 172,
              "startColumn": 9,
              "endColumn": 49,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "statement referencing the original variable",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-demo/src/main/java/org/jgrapht/demo/HelloJGraphT.java",
              "startLine": 148,
              "endLine": 148,
              "startColumn": 41,
              "endColumn": 74,
              "codeElementType": "SINGLE_VARIABLE_DECLARATION",
              "description": "changed-type variable declaration",
              "codeElement": "hrefGraph : Graph<URI,DefaultEdge>"
            },
            {
              "filePath": "jgrapht-demo/src/main/java/org/jgrapht/demo/HelloJGraphT.java",
              "startLine": 172,
              "endLine": 172,
              "startColumn": 9,
              "endColumn": 49,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "statement referencing the variable with changed type",
              "codeElement": null
            }
          ]
        }
      ]
    },
    {
      "repository": "https://github.com/jgrapht/jgrapht.git",
      "sha1": "b2355ffff22a965864bcea56a40f46a65fd19903",
      "url": "https://github.com/jgrapht/jgrapht/commit/b2355ffff22a965864bcea56a40f46a65fd19903",
      "refactorings": [
        {
          "type": "Extract Method",
          "description": "Extract Method public ClosestFirstIterator(g Graph<V,E>, startVertex V, radius double, heapSupplier Supplier<AddressableHeap<Double,QueueEntry<V,E>>>) extracted from public ClosestFirstIterator(g Graph<V,E>, startVertex V, radius double) in class org.jgrapht.traverse.ClosestFirstIterator",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 87,
              "endLine": 102,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public ClosestFirstIterator(g Graph<V,E>, startVertex V, radius double)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 101,
              "endLine": 101,
              "startColumn": 9,
              "endColumn": 94,
              "codeElementType": "CONSTRUCTOR_INVOCATION",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 105,
              "endLine": 120,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public ClosestFirstIterator(g Graph<V,E>, startVertex V, radius double, heapSupplier Supplier<AddressableHeap<Double,QueueEntry<V,E>>>)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 119,
              "endLine": 119,
              "startColumn": 9,
              "endColumn": 108,
              "codeElementType": "CONSTRUCTOR_INVOCATION",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 89,
              "endLine": 103,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public ClosestFirstIterator(g Graph<V,E>, startVertex V, radius double)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 102,
              "endLine": 102,
              "startColumn": 9,
              "endColumn": 112,
              "codeElementType": "CONSTRUCTOR_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "this(g,startVertex == null ? null : Collections.singletonList(startVertex),radius,PairingHeap::new)"
            }
          ]
        },
        {
          "type": "Extract Method",
          "description": "Extract Method public ClosestFirstIterator(g Graph<V,E>, startVertices Iterable<V>, radius double, heapSupplier Supplier<AddressableHeap<Double,QueueEntry<V,E>>>) extracted from public ClosestFirstIterator(g Graph<V,E>, startVertices Iterable<V>, radius double) in class org.jgrapht.traverse.ClosestFirstIterator",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 104,
              "endLine": 139,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public ClosestFirstIterator(g Graph<V,E>, startVertices Iterable<V>, radius double)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 120,
              "endLine": 120,
              "startColumn": 9,
              "endColumn": 33,
              "codeElementType": "SUPER_CONSTRUCTOR_INVOCATION",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 121,
              "endLine": 121,
              "startColumn": 9,
              "endColumn": 30,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 122,
              "endLine": 122,
              "startColumn": 9,
              "endColumn": 59,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 123,
              "endLine": 123,
              "startColumn": 9,
              "endColumn": 28,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 126,
              "endLine": 126,
              "startColumn": 13,
              "endColumn": 23,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 127,
              "endLine": 127,
              "startColumn": 13,
              "endColumn": 57,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 130,
              "endLine": 130,
              "startColumn": 17,
              "endColumn": 29,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 134,
              "endLine": 134,
              "startColumn": 21,
              "endColumn": 39,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 135,
              "endLine": 135,
              "startColumn": 21,
              "endColumn": 46,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 133,
              "endLine": 136,
              "startColumn": 17,
              "endColumn": 18,
              "codeElementType": "WHILE_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 128,
              "endLine": 137,
              "startColumn": 13,
              "endColumn": 14,
              "codeElementType": "IF_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 124,
              "endLine": 138,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "IF_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 133,
              "endLine": 136,
              "startColumn": 40,
              "endColumn": 18,
              "codeElementType": "BLOCK",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 128,
              "endLine": 137,
              "startColumn": 33,
              "endColumn": 14,
              "codeElementType": "BLOCK",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 124,
              "endLine": 138,
              "startColumn": 39,
              "endColumn": 10,
              "codeElementType": "BLOCK",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 140,
              "endLine": 178,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public ClosestFirstIterator(g Graph<V,E>, startVertices Iterable<V>, radius double, heapSupplier Supplier<AddressableHeap<Double,QueueEntry<V,E>>>)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 157,
              "endLine": 157,
              "startColumn": 9,
              "endColumn": 33,
              "codeElementType": "SUPER_CONSTRUCTOR_INVOCATION",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 158,
              "endLine": 158,
              "startColumn": 9,
              "endColumn": 30,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 161,
              "endLine": 161,
              "startColumn": 9,
              "endColumn": 59,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 162,
              "endLine": 162,
              "startColumn": 9,
              "endColumn": 28,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 165,
              "endLine": 165,
              "startColumn": 13,
              "endColumn": 23,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 166,
              "endLine": 166,
              "startColumn": 13,
              "endColumn": 57,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 169,
              "endLine": 169,
              "startColumn": 17,
              "endColumn": 29,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 173,
              "endLine": 173,
              "startColumn": 21,
              "endColumn": 39,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 174,
              "endLine": 174,
              "startColumn": 21,
              "endColumn": 46,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 172,
              "endLine": 175,
              "startColumn": 17,
              "endColumn": 18,
              "codeElementType": "WHILE_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 167,
              "endLine": 176,
              "startColumn": 13,
              "endColumn": 14,
              "codeElementType": "IF_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 163,
              "endLine": 177,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "IF_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 172,
              "endLine": 175,
              "startColumn": 40,
              "endColumn": 18,
              "codeElementType": "BLOCK",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 167,
              "endLine": 176,
              "startColumn": 33,
              "endColumn": 14,
              "codeElementType": "BLOCK",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 163,
              "endLine": 177,
              "startColumn": 39,
              "endColumn": 10,
              "codeElementType": "BLOCK",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 122,
              "endLine": 138,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public ClosestFirstIterator(g Graph<V,E>, startVertices Iterable<V>, radius double)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 137,
              "endLine": 137,
              "startColumn": 9,
              "endColumn": 58,
              "codeElementType": "CONSTRUCTOR_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "this(g,startVertices,radius,PairingHeap::new)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 159,
              "endLine": 159,
              "startColumn": 9,
              "endColumn": 78,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/ClosestFirstIterator.java",
              "startLine": 160,
              "endLine": 160,
              "startColumn": 9,
              "endColumn": 40,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            }
          ]
        }
      ]
    },
    {
      "repository": "https://github.com/jgrapht/jgrapht.git",
      "sha1": "e8fbd8ba19ada2dc4524ff3fa0f5ba39adc0bdf5",
      "url": "https://github.com/jgrapht/jgrapht/commit/e8fbd8ba19ada2dc4524ff3fa0f5ba39adc0bdf5",
      "refactorings": [
        {
          "type": "Add Parameter",
          "description": "Add Parameter minEdgeWeight : double in method public BlossomVState(graph Graph<V,E>, nodes BlossomVNode[], edges BlossomVEdge[], nodeNum int, edgeNum int, treeNum int, graphVertices List<V>, graphEdges List<E>, options BlossomVOptions, minEdgeWeight double) from class org.jgrapht.alg.matching.blossom.v5.BlossomVState",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/blossom/v5/BlossomVState.java",
              "startLine": 94,
              "endLine": 123,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public BlossomVState(graph Graph<V,E>, nodes BlossomVNode[], edges BlossomVEdge[], nodeNum int, edgeNum int, treeNum int, graphVertices List<V>, graphEdges List<E>, options BlossomVOptions)"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/blossom/v5/BlossomVState.java",
              "startLine": 114,
              "endLine": 114,
              "startColumn": 90,
              "endColumn": 110,
              "codeElementType": "SINGLE_VARIABLE_DECLARATION",
              "description": "added parameter",
              "codeElement": "minEdgeWeight : double"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/blossom/v5/BlossomVState.java",
              "startLine": 97,
              "endLine": 127,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with added parameter",
              "codeElement": "public BlossomVState(graph Graph<V,E>, nodes BlossomVNode[], edges BlossomVEdge[], nodeNum int, edgeNum int, treeNum int, graphVertices List<V>, graphEdges List<E>, options BlossomVOptions, minEdgeWeight double)"
            }
          ]
        },
        {
          "type": "Change Return Type",
          "description": "Change Return Type void to double in method private initGraph() : double from class org.jgrapht.alg.matching.blossom.v5.BlossomVInitializer",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/blossom/v5/BlossomVInitializer.java",
              "startLine": 194,
              "endLine": 194,
              "startColumn": 13,
              "endColumn": 17,
              "codeElementType": "TYPE",
              "description": "original return type",
              "codeElement": "void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/blossom/v5/BlossomVInitializer.java",
              "startLine": 191,
              "endLine": 225,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "private initGraph() : void"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/blossom/v5/BlossomVInitializer.java",
              "startLine": 194,
              "endLine": 194,
              "startColumn": 13,
              "endColumn": 19,
              "codeElementType": "TYPE",
              "description": "changed return type",
              "codeElement": "double"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/blossom/v5/BlossomVInitializer.java",
              "startLine": 191,
              "endLine": 227,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with changed return type",
              "codeElement": "private initGraph() : double"
            }
          ]
        },
        {
          "type": "Rename Method",
          "description": "Rename Method private lazyComputeMinimumWeightPerfectMatching() : void renamed to private lazyComputeWeightedPerfectMatching() : void in class org.jgrapht.alg.matching.blossom.v5.KolmogorovWeightedPerfectMatching",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/blossom/v5/KolmogorovMinimumWeightPerfectMatching.java",
              "startLine": 259,
              "endLine": 376,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "private lazyComputeMinimumWeightPerfectMatching() : void"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/blossom/v5/KolmogorovWeightedPerfectMatching.java",
              "startLine": 344,
              "endLine": 461,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "renamed method declaration",
              "codeElement": "private lazyComputeWeightedPerfectMatching() : void"
            }
          ]
        },
        {
          "type": "Extract Method",
          "description": "Extract Method public KolmogorovWeightedPerfectMatching(graph Graph<V,E>, options BlossomVOptions, objectiveSense ObjectiveSense) extracted from public KolmogorovMinimumWeightPerfectMatching(graph Graph<V,E>, options BlossomVOptions) in class org.jgrapht.alg.matching.blossom.v5.KolmogorovWeightedPerfectMatching",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/blossom/v5/KolmogorovMinimumWeightPerfectMatching.java",
              "startLine": 155,
              "endLine": 171,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public KolmogorovMinimumWeightPerfectMatching(graph Graph<V,E>, options BlossomVOptions)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/blossom/v5/KolmogorovMinimumWeightPerfectMatching.java",
              "startLine": 164,
              "endLine": 164,
              "startColumn": 9,
              "endColumn": 39,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/blossom/v5/KolmogorovMinimumWeightPerfectMatching.java",
              "startLine": 166,
              "endLine": 166,
              "startColumn": 13,
              "endColumn": 69,
              "codeElementType": "THROW_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/blossom/v5/KolmogorovMinimumWeightPerfectMatching.java",
              "startLine": 168,
              "endLine": 168,
              "startColumn": 13,
              "endColumn": 32,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/blossom/v5/KolmogorovMinimumWeightPerfectMatching.java",
              "startLine": 170,
              "endLine": 170,
              "startColumn": 9,
              "endColumn": 56,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/blossom/v5/KolmogorovMinimumWeightPerfectMatching.java",
              "startLine": 165,
              "endLine": 169,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "IF_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/blossom/v5/KolmogorovMinimumWeightPerfectMatching.java",
              "startLine": 165,
              "endLine": 167,
              "startColumn": 50,
              "endColumn": 10,
              "codeElementType": "BLOCK",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/blossom/v5/KolmogorovMinimumWeightPerfectMatching.java",
              "startLine": 167,
              "endLine": 169,
              "startColumn": 16,
              "endColumn": 10,
              "codeElementType": "BLOCK",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/blossom/v5/KolmogorovWeightedPerfectMatching.java",
              "startLine": 237,
              "endLine": 258,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public KolmogorovWeightedPerfectMatching(graph Graph<V,E>, options BlossomVOptions, objectiveSense ObjectiveSense)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/blossom/v5/KolmogorovWeightedPerfectMatching.java",
              "startLine": 247,
              "endLine": 247,
              "startColumn": 9,
              "endColumn": 39,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/blossom/v5/KolmogorovWeightedPerfectMatching.java",
              "startLine": 250,
              "endLine": 250,
              "startColumn": 13,
              "endColumn": 69,
              "codeElementType": "THROW_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/blossom/v5/KolmogorovWeightedPerfectMatching.java",
              "startLine": 254,
              "endLine": 254,
              "startColumn": 13,
              "endColumn": 32,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/blossom/v5/KolmogorovWeightedPerfectMatching.java",
              "startLine": 257,
              "endLine": 257,
              "startColumn": 9,
              "endColumn": 56,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/blossom/v5/KolmogorovWeightedPerfectMatching.java",
              "startLine": 249,
              "endLine": 255,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "IF_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/blossom/v5/KolmogorovWeightedPerfectMatching.java",
              "startLine": 249,
              "endLine": 251,
              "startColumn": 50,
              "endColumn": 10,
              "codeElementType": "BLOCK",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/blossom/v5/KolmogorovWeightedPerfectMatching.java",
              "startLine": 253,
              "endLine": 255,
              "startColumn": 16,
              "endColumn": 10,
              "codeElementType": "BLOCK",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/blossom/v5/KolmogorovWeightedPerfectMatching.java",
              "startLine": 226,
              "endLine": 235,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public KolmogorovWeightedPerfectMatching(graph Graph<V,E>, options BlossomVOptions)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/blossom/v5/KolmogorovWeightedPerfectMatching.java",
              "startLine": 234,
              "endLine": 234,
              "startColumn": 9,
              "endColumn": 40,
              "codeElementType": "CONSTRUCTOR_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "this(graph,options,MINIMIZE)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/blossom/v5/KolmogorovWeightedPerfectMatching.java",
              "startLine": 248,
              "endLine": 248,
              "startColumn": 9,
              "endColumn": 46,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/blossom/v5/KolmogorovWeightedPerfectMatching.java",
              "startLine": 252,
              "endLine": 252,
              "startColumn": 13,
              "endColumn": 98,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/blossom/v5/KolmogorovWeightedPerfectMatching.java",
              "startLine": 256,
              "endLine": 256,
              "startColumn": 9,
              "endColumn": 35,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/blossom/v5/KolmogorovWeightedPerfectMatching.java",
              "startLine": 251,
              "endLine": 253,
              "startColumn": 48,
              "endColumn": 10,
              "codeElementType": "BLOCK",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/blossom/v5/KolmogorovWeightedPerfectMatching.java",
              "startLine": 251,
              "endLine": 255,
              "startColumn": 16,
              "endColumn": 10,
              "codeElementType": "IF_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            }
          ]
        }
      ]
    },
    {
      "repository": "https://github.com/jgrapht/jgrapht.git",
      "sha1": "28e09943b3d7b6a17f0378fbdf3aad090aa95769",
      "url": "https://github.com/jgrapht/jgrapht/commit/28e09943b3d7b6a17f0378fbdf3aad090aa95769",
      "refactorings": [
        {
          "type": "Extract Method",
          "description": "Extract Method protected getEntireGraphVertexIterator() : Iterator<V> extracted from public CrossComponentIterator(g Graph<V,E>, startVertices Iterable<V>) in class org.jgrapht.traverse.CrossComponentIterator",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/CrossComponentIterator.java",
              "startLine": 101,
              "endLine": 141,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public CrossComponentIterator(g Graph<V,E>, startVertices Iterable<V>)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/CrossComponentIterator.java",
              "startLine": 119,
              "endLine": 119,
              "startColumn": 9,
              "endColumn": 71,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/CrossComponentIterator.java",
              "startLine": 206,
              "endLine": 218,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "protected getEntireGraphVertexIterator() : Iterator<V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/CrossComponentIterator.java",
              "startLine": 215,
              "endLine": 215,
              "startColumn": 13,
              "endColumn": 70,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/CrossComponentIterator.java",
              "startLine": 101,
              "endLine": 140,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public CrossComponentIterator(g Graph<V,E>, startVertices Iterable<V>)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/CrossComponentIterator.java",
              "startLine": 129,
              "endLine": 129,
              "startColumn": 52,
              "endColumn": 82,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "getEntireGraphVertexIterator()"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/CrossComponentIterator.java",
              "startLine": 214,
              "endLine": 214,
              "startColumn": 13,
              "endColumn": 49,
              "codeElementType": "ASSERT_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/CrossComponentIterator.java",
              "startLine": 217,
              "endLine": 217,
              "startColumn": 9,
              "endColumn": 42,
              "codeElementType": "RETURN_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/CrossComponentIterator.java",
              "startLine": 213,
              "endLine": 216,
              "startColumn": 48,
              "endColumn": 10,
              "codeElementType": "BLOCK",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/CrossComponentIterator.java",
              "startLine": 213,
              "endLine": 216,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "IF_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            }
          ]
        },
        {
          "type": "Extract Method",
          "description": "Extract Method protected getEntireGraphVertexIterator() : Iterator<V> extracted from public hasNext() : boolean in class org.jgrapht.traverse.CrossComponentIterator",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/CrossComponentIterator.java",
              "startLine": 143,
              "endLine": 177,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public hasNext() : boolean"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/CrossComponentIterator.java",
              "startLine": 158,
              "endLine": 159,
              "startColumn": 13,
              "endColumn": 95,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/CrossComponentIterator.java",
              "startLine": 159,
              "endLine": 159,
              "startColumn": 17,
              "endColumn": 44,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/CrossComponentIterator.java",
              "startLine": 206,
              "endLine": 218,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "protected getEntireGraphVertexIterator() : Iterator<V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/CrossComponentIterator.java",
              "startLine": 214,
              "endLine": 214,
              "startColumn": 13,
              "endColumn": 49,
              "codeElementType": "ASSERT_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/CrossComponentIterator.java",
              "startLine": 214,
              "endLine": 214,
              "startColumn": 20,
              "endColumn": 47,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/CrossComponentIterator.java",
              "startLine": 142,
              "endLine": 176,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public hasNext() : boolean"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/CrossComponentIterator.java",
              "startLine": 158,
              "endLine": 158,
              "startColumn": 47,
              "endColumn": 77,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "getEntireGraphVertexIterator()"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/CrossComponentIterator.java",
              "startLine": 215,
              "endLine": 215,
              "startColumn": 13,
              "endColumn": 70,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/CrossComponentIterator.java",
              "startLine": 217,
              "endLine": 217,
              "startColumn": 9,
              "endColumn": 42,
              "codeElementType": "RETURN_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/CrossComponentIterator.java",
              "startLine": 213,
              "endLine": 216,
              "startColumn": 48,
              "endColumn": 10,
              "codeElementType": "BLOCK",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/CrossComponentIterator.java",
              "startLine": 213,
              "endLine": 216,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "IF_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            }
          ]
        }
      ]
    },
    {
      "repository": "https://github.com/jgrapht/jgrapht.git",
      "sha1": "076bfacd7da3fee179dc840a82f8d9da62b42546",
      "url": "https://github.com/jgrapht/jgrapht/commit/076bfacd7da3fee179dc840a82f8d9da62b42546",
      "refactorings": [
        {
          "type": "Extract Method",
          "description": "Extract Method public DirectedAcyclicGraph(vertexSupplier Supplier<V>, edgeSupplier Supplier<E>, weighted boolean, allowMultipleEdges boolean) extracted from public DirectedAcyclicGraph(edgeClass Class<? extends E>) in class org.jgrapht.graph.DirectedAcyclicGraph",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/DirectedAcyclicGraph.java",
              "startLine": 86,
              "endLine": 94,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public DirectedAcyclicGraph(edgeClass Class<? extends E>)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/DirectedAcyclicGraph.java",
              "startLine": 93,
              "endLine": 93,
              "startColumn": 9,
              "endColumn": 67,
              "codeElementType": "CONSTRUCTOR_INVOCATION",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/DirectedAcyclicGraph.java",
              "startLine": 110,
              "endLine": 124,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public DirectedAcyclicGraph(vertexSupplier Supplier<V>, edgeSupplier Supplier<E>, weighted boolean, allowMultipleEdges boolean)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/DirectedAcyclicGraph.java",
              "startLine": 121,
              "endLine": 123,
              "startColumn": 9,
              "endColumn": 43,
              "codeElementType": "CONSTRUCTOR_INVOCATION",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/DirectedAcyclicGraph.java",
              "startLine": 85,
              "endLine": 93,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public DirectedAcyclicGraph(edgeClass Class<? extends E>)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/DirectedAcyclicGraph.java",
              "startLine": 92,
              "endLine": 92,
              "startColumn": 9,
              "endColumn": 74,
              "codeElementType": "CONSTRUCTOR_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "this(null,SupplierUtil.createSupplier(edgeClass),false,false)"
            }
          ]
        },
        {
          "type": "Extract Method",
          "description": "Extract Method protected DirectedAcyclicGraph(vertexSupplier Supplier<V>, edgeSupplier Supplier<E>, visitedStrategyFactory VisitedStrategyFactory, topoOrderMap TopoOrderMap<V>, weighted boolean, allowMultipleEdges boolean) extracted from protected DirectedAcyclicGraph(vertexSupplier Supplier<V>, edgeSupplier Supplier<E>, visitedStrategyFactory VisitedStrategyFactory, topoOrderMap TopoOrderMap<V>, weighted boolean) in class org.jgrapht.graph.DirectedAcyclicGraph",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/DirectedAcyclicGraph.java",
              "startLine": 111,
              "endLine": 133,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "protected DirectedAcyclicGraph(vertexSupplier Supplier<V>, edgeSupplier Supplier<E>, visitedStrategyFactory VisitedStrategyFactory, topoOrderMap TopoOrderMap<V>, weighted boolean)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/DirectedAcyclicGraph.java",
              "startLine": 128,
              "endLine": 129,
              "startColumn": 9,
              "endColumn": 94,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/DirectedAcyclicGraph.java",
              "startLine": 130,
              "endLine": 131,
              "startColumn": 9,
              "endColumn": 90,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/DirectedAcyclicGraph.java",
              "startLine": 132,
              "endLine": 132,
              "startColumn": 9,
              "endColumn": 52,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/DirectedAcyclicGraph.java",
              "startLine": 127,
              "endLine": 127,
              "startColumn": 9,
              "endColumn": 55,
              "codeElementType": "SUPER_CONSTRUCTOR_INVOCATION",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/DirectedAcyclicGraph.java",
              "startLine": 145,
              "endLine": 176,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "protected DirectedAcyclicGraph(vertexSupplier Supplier<V>, edgeSupplier Supplier<E>, visitedStrategyFactory VisitedStrategyFactory, topoOrderMap TopoOrderMap<V>, weighted boolean, allowMultipleEdges boolean)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/DirectedAcyclicGraph.java",
              "startLine": 171,
              "endLine": 172,
              "startColumn": 9,
              "endColumn": 94,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/DirectedAcyclicGraph.java",
              "startLine": 173,
              "endLine": 174,
              "startColumn": 9,
              "endColumn": 90,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/DirectedAcyclicGraph.java",
              "startLine": 175,
              "endLine": 175,
              "startColumn": 9,
              "endColumn": 52,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/DirectedAcyclicGraph.java",
              "startLine": 162,
              "endLine": 170,
              "startColumn": 9,
              "endColumn": 27,
              "codeElementType": "SUPER_CONSTRUCTOR_INVOCATION",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/DirectedAcyclicGraph.java",
              "startLine": 126,
              "endLine": 143,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "protected DirectedAcyclicGraph(vertexSupplier Supplier<V>, edgeSupplier Supplier<E>, visitedStrategyFactory VisitedStrategyFactory, topoOrderMap TopoOrderMap<V>, weighted boolean)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/graph/DirectedAcyclicGraph.java",
              "startLine": 142,
              "endLine": 142,
              "startColumn": 9,
              "endColumn": 99,
              "codeElementType": "CONSTRUCTOR_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "this(vertexSupplier,edgeSupplier,visitedStrategyFactory,topoOrderMap,weighted,false)"
            }
          ]
        }
      ]
    },
    {
      "repository": "https://github.com/jgrapht/jgrapht.git",
      "sha1": "60c8a85da4051d9ac4225dbfbe13257e1762c57a",
      "url": "https://github.com/jgrapht/jgrapht/commit/60c8a85da4051d9ac4225dbfbe13257e1762c57a",
      "refactorings": [
        {
          "type": "Add Parameter",
          "description": "Add Parameter ordering : SetSizeOrdering in method package UnionIterator(ordering SetSizeOrdering) from class org.jgrapht.util.UnmodifiableUnionSet.UnionIterator",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/UnmodifiableUnionSet.java",
              "startLine": 99,
              "endLine": 104,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public UnionIterator()"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/UnmodifiableUnionSet.java",
              "startLine": 138,
              "endLine": 138,
              "startColumn": 23,
              "endColumn": 47,
              "codeElementType": "SINGLE_VARIABLE_DECLARATION",
              "description": "added parameter",
              "codeElement": "ordering : SetSizeOrdering"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/UnmodifiableUnionSet.java",
              "startLine": 138,
              "endLine": 144,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with added parameter",
              "codeElement": "package UnionIterator(ordering SetSizeOrdering)"
            }
          ]
        },
        {
          "type": "Change Method Access Modifier",
          "description": "Change Method Access Modifier public to package in method package UnionIterator(ordering SetSizeOrdering) from class org.jgrapht.util.UnmodifiableUnionSet.UnionIterator",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/UnmodifiableUnionSet.java",
              "startLine": 99,
              "endLine": 104,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public UnionIterator()"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/UnmodifiableUnionSet.java",
              "startLine": 138,
              "endLine": 144,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with changed access modifier",
              "codeElement": "package UnionIterator(ordering SetSizeOrdering)"
            }
          ]
        },
        {
          "type": "Extract Method",
          "description": "Extract Method private orderSetsBySize() : SetSizeOrdering extracted from public size() : int in class org.jgrapht.util.UnmodifiableUnionSet",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/UnmodifiableUnionSet.java",
              "startLine": 67,
              "endLine": 82,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public size() : int"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/UnmodifiableUnionSet.java",
              "startLine": 75,
              "endLine": 75,
              "startColumn": 9,
              "endColumn": 34,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/UnmodifiableUnionSet.java",
              "startLine": 86,
              "endLine": 103,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "private orderSetsBySize() : SetSizeOrdering"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/UnmodifiableUnionSet.java",
              "startLine": 88,
              "endLine": 88,
              "startColumn": 9,
              "endColumn": 38,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/UnmodifiableUnionSet.java",
              "startLine": 61,
              "endLine": 78,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public size() : int"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/UnmodifiableUnionSet.java",
              "startLine": 69,
              "endLine": 69,
              "startColumn": 36,
              "endColumn": 53,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "orderSetsBySize()"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/UnmodifiableUnionSet.java",
              "startLine": 89,
              "endLine": 89,
              "startColumn": 9,
              "endColumn": 40,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/UnmodifiableUnionSet.java",
              "startLine": 91,
              "endLine": 95,
              "startColumn": 13,
              "endColumn": 28,
              "codeElementType": "RETURN_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/UnmodifiableUnionSet.java",
              "startLine": 97,
              "endLine": 101,
              "startColumn": 13,
              "endColumn": 29,
              "codeElementType": "RETURN_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/UnmodifiableUnionSet.java",
              "startLine": 90,
              "endLine": 96,
              "startColumn": 37,
              "endColumn": 10,
              "codeElementType": "BLOCK",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/UnmodifiableUnionSet.java",
              "startLine": 96,
              "endLine": 102,
              "startColumn": 16,
              "endColumn": 10,
              "codeElementType": "BLOCK",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/UnmodifiableUnionSet.java",
              "startLine": 90,
              "endLine": 102,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "IF_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            }
          ]
        }
      ]
    },
    {
      "repository": "https://github.com/jgrapht/jgrapht.git",
      "sha1": "577148b3d5945317f11882cb7ec40d59eb183a1b",
      "url": "https://github.com/jgrapht/jgrapht/commit/577148b3d5945317f11882cb7ec40d59eb183a1b",
      "refactorings": [
        {
          "type": "Extract Method",
          "description": "Extract Method protected selectOutgoingEdges(vertex V) : Set<E> extracted from private addUnseenChildrenOf(vertex V) : void in class org.jgrapht.traverse.CrossComponentIterator",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/CrossComponentIterator.java",
              "startLine": 311,
              "endLine": 326,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "private addUnseenChildrenOf(vertex V) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/CrossComponentIterator.java",
              "startLine": 313,
              "endLine": 313,
              "startColumn": 23,
              "endColumn": 52,
              "codeElementType": "ENHANCED_FOR_STATEMENT_EXPRESSION",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/CrossComponentIterator.java",
              "startLine": 311,
              "endLine": 321,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "protected selectOutgoingEdges(vertex V) : Set<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/CrossComponentIterator.java",
              "startLine": 320,
              "endLine": 320,
              "startColumn": 9,
              "endColumn": 46,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/CrossComponentIterator.java",
              "startLine": 323,
              "endLine": 338,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "private addUnseenChildrenOf(vertex V) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/CrossComponentIterator.java",
              "startLine": 325,
              "endLine": 325,
              "startColumn": 23,
              "endColumn": 50,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "selectOutgoingEdges(vertex)"
            }
          ]
        }
      ]
    },
    {
      "repository": "https://github.com/jgrapht/jgrapht.git",
      "sha1": "f2e059a2cae1fc5a7e1b2f7f44e97fde27167b88",
      "url": "https://github.com/jgrapht/jgrapht/commit/f2e059a2cae1fc5a7e1b2f7f44e97fde27167b88",
      "refactorings": [
        {
          "type": "Extract Method",
          "description": "Extract Method private analyzeCircuits() : void extracted from public findSimpleCycles() : List<List<V>> in class org.jgrapht.alg.cycle.HawickJamesSimpleCycles",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 266,
              "endLine": 292,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public findSimpleCycles() : List<List<V>>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 281,
              "endLine": 281,
              "startColumn": 17,
              "endColumn": 36,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 282,
              "endLine": 282,
              "startColumn": 17,
              "endColumn": 30,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 285,
              "endLine": 285,
              "startColumn": 13,
              "endColumn": 39,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 286,
              "endLine": 286,
              "startColumn": 13,
              "endColumn": 49,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 280,
              "endLine": 283,
              "startColumn": 13,
              "endColumn": 14,
              "codeElementType": "FOR_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 279,
              "endLine": 287,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "FOR_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 280,
              "endLine": 283,
              "startColumn": 49,
              "endColumn": 14,
              "codeElementType": "BLOCK",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 279,
              "endLine": 287,
              "startColumn": 45,
              "endColumn": 10,
              "codeElementType": "BLOCK",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 280,
              "endLine": 291,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "private analyzeCircuits() : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 284,
              "endLine": 284,
              "startColumn": 17,
              "endColumn": 36,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 285,
              "endLine": 285,
              "startColumn": 17,
              "endColumn": 30,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 288,
              "endLine": 288,
              "startColumn": 13,
              "endColumn": 39,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 289,
              "endLine": 289,
              "startColumn": 13,
              "endColumn": 31,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 283,
              "endLine": 286,
              "startColumn": 13,
              "endColumn": 14,
              "codeElementType": "FOR_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 282,
              "endLine": 290,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "FOR_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 283,
              "endLine": 286,
              "startColumn": 49,
              "endColumn": 14,
              "codeElementType": "BLOCK",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 282,
              "endLine": 290,
              "startColumn": 45,
              "endColumn": 10,
              "codeElementType": "BLOCK",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 221,
              "endLine": 239,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public findSimpleCycles() : List<List<V>>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 235,
              "endLine": 235,
              "startColumn": 9,
              "endColumn": 26,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "analyzeCircuits()"
            }
          ]
        },
        {
          "type": "Extract Method",
          "description": "Extract Method private analyzeCircuits() : void extracted from public printSimpleCycles() : void in class org.jgrapht.alg.cycle.HawickJamesSimpleCycles",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 294,
              "endLine": 317,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public printSimpleCycles() : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 308,
              "endLine": 308,
              "startColumn": 17,
              "endColumn": 36,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 309,
              "endLine": 309,
              "startColumn": 17,
              "endColumn": 30,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 312,
              "endLine": 312,
              "startColumn": 13,
              "endColumn": 39,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 313,
              "endLine": 313,
              "startColumn": 13,
              "endColumn": 50,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 307,
              "endLine": 310,
              "startColumn": 13,
              "endColumn": 14,
              "codeElementType": "FOR_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 306,
              "endLine": 314,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "FOR_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 307,
              "endLine": 310,
              "startColumn": 49,
              "endColumn": 14,
              "codeElementType": "BLOCK",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 306,
              "endLine": 314,
              "startColumn": 45,
              "endColumn": 10,
              "codeElementType": "BLOCK",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 280,
              "endLine": 291,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "private analyzeCircuits() : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 284,
              "endLine": 284,
              "startColumn": 17,
              "endColumn": 36,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 285,
              "endLine": 285,
              "startColumn": 17,
              "endColumn": 30,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 288,
              "endLine": 288,
              "startColumn": 13,
              "endColumn": 39,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 289,
              "endLine": 289,
              "startColumn": 13,
              "endColumn": 31,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 283,
              "endLine": 286,
              "startColumn": 13,
              "endColumn": 14,
              "codeElementType": "FOR_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 282,
              "endLine": 290,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "FOR_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 283,
              "endLine": 286,
              "startColumn": 49,
              "endColumn": 14,
              "codeElementType": "BLOCK",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 282,
              "endLine": 290,
              "startColumn": 45,
              "endColumn": 10,
              "codeElementType": "BLOCK",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 241,
              "endLine": 259,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public printSimpleCycles() : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 257,
              "endLine": 257,
              "startColumn": 9,
              "endColumn": 26,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "analyzeCircuits()"
            }
          ]
        },
        {
          "type": "Extract Method",
          "description": "Extract Method private analyzeCircuits() : void extracted from public countSimpleCycles() : long in class org.jgrapht.alg.cycle.HawickJamesSimpleCycles",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 319,
              "endLine": 345,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public countSimpleCycles() : long"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 334,
              "endLine": 334,
              "startColumn": 17,
              "endColumn": 36,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 335,
              "endLine": 335,
              "startColumn": 17,
              "endColumn": 30,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 338,
              "endLine": 338,
              "startColumn": 13,
              "endColumn": 39,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 339,
              "endLine": 339,
              "startColumn": 13,
              "endColumn": 50,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 333,
              "endLine": 336,
              "startColumn": 13,
              "endColumn": 14,
              "codeElementType": "FOR_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 332,
              "endLine": 340,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "FOR_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 333,
              "endLine": 336,
              "startColumn": 49,
              "endColumn": 14,
              "codeElementType": "BLOCK",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 332,
              "endLine": 340,
              "startColumn": 45,
              "endColumn": 10,
              "codeElementType": "BLOCK",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 280,
              "endLine": 291,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "private analyzeCircuits() : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 284,
              "endLine": 284,
              "startColumn": 17,
              "endColumn": 36,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 285,
              "endLine": 285,
              "startColumn": 17,
              "endColumn": 30,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 288,
              "endLine": 288,
              "startColumn": 13,
              "endColumn": 39,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 289,
              "endLine": 289,
              "startColumn": 13,
              "endColumn": 31,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 283,
              "endLine": 286,
              "startColumn": 13,
              "endColumn": 14,
              "codeElementType": "FOR_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 282,
              "endLine": 290,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "FOR_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 283,
              "endLine": 286,
              "startColumn": 49,
              "endColumn": 14,
              "codeElementType": "BLOCK",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 282,
              "endLine": 290,
              "startColumn": 45,
              "endColumn": 10,
              "codeElementType": "BLOCK",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 261,
              "endLine": 278,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public countSimpleCycles() : long"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 275,
              "endLine": 275,
              "startColumn": 9,
              "endColumn": 26,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "analyzeCircuits()"
            }
          ]
        },
        {
          "type": "Remove Parameter",
          "description": "Remove Parameter o : Operation in method private initState(o Operation) : void from class org.jgrapht.alg.cycle.HawickJamesSimpleCycles",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 93,
              "endLine": 93,
              "startColumn": 28,
              "endColumn": 39,
              "codeElementType": "SINGLE_VARIABLE_DECLARATION",
              "description": "removed parameter",
              "codeElement": "o : Operation"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 92,
              "endLine": 118,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "private initState(o Operation) : void"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 87,
              "endLine": 109,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with removed parameter",
              "codeElement": "private initState() : void"
            }
          ]
        },
        {
          "type": "Change Parameter Type",
          "description": "Change Parameter Type o : Operation to steps : int in method private circuit(v Integer, steps int) : boolean from class org.jgrapht.alg.cycle.HawickJamesSimpleCycles",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 150,
              "endLine": 150,
              "startColumn": 40,
              "endColumn": 51,
              "codeElementType": "SINGLE_VARIABLE_DECLARATION",
              "description": "original variable declaration",
              "codeElement": "o : Operation"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 184,
              "endLine": 186,
              "startColumn": 17,
              "endColumn": 18,
              "codeElementType": "IF_STATEMENT",
              "description": "statement referencing the original variable",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 141,
              "endLine": 141,
              "startColumn": 40,
              "endColumn": 49,
              "codeElementType": "SINGLE_VARIABLE_DECLARATION",
              "description": "changed-type variable declaration",
              "codeElement": "steps : int"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/HawickJamesSimpleCycles.java",
              "startLine": 158,
              "endLine": 160,
              "startColumn": 17,
              "endColumn": 18,
              "codeElementType": "IF_STATEMENT",
              "description": "statement referencing the variable with changed type",
              "codeElement": null
            }
          ]
        }
      ]
    },
    {
      "repository": "https://github.com/jgrapht/jgrapht.git",
      "sha1": "5c607dcaa26d1e70159b01f15c2a4d479a4b0ede",
      "url": "https://github.com/jgrapht/jgrapht/commit/5c607dcaa26d1e70159b01f15c2a4d479a4b0ede",
      "refactorings": [
        {
          "type": "Change Return Type",
          "description": "Change Return Type Flow to Flow<E> in method public getFlow() : Flow<E> from class org.jgrapht.alg.interfaces.FlowAlgorithm",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/interfaces/FlowAlgorithm.java",
              "startLine": 38,
              "endLine": 38,
              "startColumn": 13,
              "endColumn": 17,
              "codeElementType": "TYPE",
              "description": "original return type",
              "codeElement": "Flow"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/interfaces/FlowAlgorithm.java",
              "startLine": 33,
              "endLine": 41,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public getFlow() : Flow"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/interfaces/FlowAlgorithm.java",
              "startLine": 38,
              "endLine": 38,
              "startColumn": 13,
              "endColumn": 20,
              "codeElementType": "TYPE",
              "description": "changed return type",
              "codeElement": "Flow<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/interfaces/FlowAlgorithm.java",
              "startLine": 33,
              "endLine": 41,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with changed return type",
              "codeElement": "public getFlow() : Flow<E>"
            }
          ]
        }
      ]
    },
    {
      "repository": "https://github.com/jgrapht/jgrapht.git",
      "sha1": "f1074be07a554d27bda1be699b87ee031e4d0af8",
      "url": "https://github.com/jgrapht/jgrapht/commit/f1074be07a554d27bda1be699b87ee031e4d0af8",
      "refactorings": [
        {
          "type": "Add Method Annotation",
          "description": "Add Method Annotation @SuppressWarnings(\"unlikely-arg-type\") in method public hasElement(e E) : boolean from class org.jgrapht.alg.util.Pair",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/util/Pair.java",
              "startLine": 104,
              "endLine": 120,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public hasElement(e E) : boolean"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/util/Pair.java",
              "startLine": 109,
              "endLine": 109,
              "startColumn": 5,
              "endColumn": 43,
              "codeElementType": "ANNOTATION",
              "description": "added annotation",
              "codeElement": "@SuppressWarnings(\"unlikely-arg-type\")"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/util/Pair.java",
              "startLine": 100,
              "endLine": 117,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with added annotation",
              "codeElement": "public hasElement(e E) : boolean"
            }
          ]
        }
      ]
    },
    {
      "repository": "https://github.com/jgrapht/jgrapht.git",
      "sha1": "fce799fb134b445bdf976193430be621eb98d72f",
      "url": "https://github.com/jgrapht/jgrapht/commit/fce799fb134b445bdf976193430be621eb98d72f",
      "refactorings": [
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from public getNumberOfTriangles(graph Graph<V,E>) : long in class org.jgrapht.GraphMetrics & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/GraphMetrics.java",
              "startLine": 246,
              "endLine": 333,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public getNumberOfTriangles(graph Graph<V,E>) : long"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/GraphMetrics.java",
              "startLine": 276,
              "endLine": 276,
              "startColumn": 9,
              "endColumn": 79,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/GraphMetrics.java",
              "startLine": 247,
              "endLine": 335,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public getNumberOfTriangles(graph Graph<V,E>) : long"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/GraphMetrics.java",
              "startLine": 278,
              "endLine": 278,
              "startColumn": 13,
              "endColumn": 80,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(graph.vertexSet().size())"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from private getVertexInOrder(vertexOrder List<V>) : Map<V,Integer> in class org.jgrapht.alg.clique.ChordalGraphMaxCliqueFinder & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/clique/ChordalGraphMaxCliqueFinder.java",
              "startLine": 117,
              "endLine": 133,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "private getVertexInOrder(vertexOrder List<V>) : Map<V,Integer>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/clique/ChordalGraphMaxCliqueFinder.java",
              "startLine": 127,
              "endLine": 127,
              "startColumn": 9,
              "endColumn": 75,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/clique/ChordalGraphMaxCliqueFinder.java",
              "startLine": 118,
              "endLine": 135,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "private getVertexInOrder(vertexOrder List<V>) : Map<V,Integer>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/clique/ChordalGraphMaxCliqueFinder.java",
              "startLine": 129,
              "endLine": 129,
              "startColumn": 13,
              "endColumn": 74,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(vertexOrder.size())"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from public BrownBacktrackColoring(graph Graph<V,E>) in class org.jgrapht.alg.color.BrownBacktrackColoring & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/BrownBacktrackColoring.java",
              "startLine": 50,
              "endLine": 74,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public BrownBacktrackColoring(graph Graph<V,E>)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/BrownBacktrackColoring.java",
              "startLine": 61,
              "endLine": 61,
              "startColumn": 9,
              "endColumn": 47,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/BrownBacktrackColoring.java",
              "startLine": 51,
              "endLine": 75,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public BrownBacktrackColoring(graph Graph<V,E>)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/BrownBacktrackColoring.java",
              "startLine": 62,
              "endLine": 62,
              "startColumn": 20,
              "endColumn": 74,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(numVertices)"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from private lazyComputeColoring() : void in class org.jgrapht.alg.color.ChordalGraphColoring & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/ChordalGraphColoring.java",
              "startLine": 88,
              "endLine": 113,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "private lazyComputeColoring() : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/ChordalGraphColoring.java",
              "startLine": 96,
              "endLine": 96,
              "startColumn": 13,
              "endColumn": 92,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/ChordalGraphColoring.java",
              "startLine": 89,
              "endLine": 116,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "private lazyComputeColoring() : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/ChordalGraphColoring.java",
              "startLine": 98,
              "endLine": 98,
              "startColumn": 17,
              "endColumn": 90,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(perfectEliminationOrder.size())"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from private getVertexInOrder(vertexOrder List<V>) : Map<V,Integer> in class org.jgrapht.alg.color.ChordalGraphColoring & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/ChordalGraphColoring.java",
              "startLine": 115,
              "endLine": 131,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "private getVertexInOrder(vertexOrder List<V>) : Map<V,Integer>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/ChordalGraphColoring.java",
              "startLine": 125,
              "endLine": 125,
              "startColumn": 9,
              "endColumn": 75,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/ChordalGraphColoring.java",
              "startLine": 118,
              "endLine": 135,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "private getVertexInOrder(vertexOrder List<V>) : Map<V,Integer>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/ChordalGraphColoring.java",
              "startLine": 129,
              "endLine": 129,
              "startColumn": 13,
              "endColumn": 74,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(vertexOrder.size())"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from public ColoringRepresentation(graph Graph<V,E>, alpha Coloring<V>) in class org.jgrapht.alg.color.ColorRefinementAlgorithm.ColoringRepresentation & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/ColorRefinementAlgorithm.java",
              "startLine": 352,
              "endLine": 373,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public ColoringRepresentation(graph Graph<V,E>, alpha Coloring<V>)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/ColorRefinementAlgorithm.java",
              "startLine": 356,
              "endLine": 356,
              "startColumn": 13,
              "endColumn": 64,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/ColorRefinementAlgorithm.java",
              "startLine": 353,
              "endLine": 374,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public ColoringRepresentation(graph Graph<V,E>, alpha Coloring<V>)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/ColorRefinementAlgorithm.java",
              "startLine": 357,
              "endLine": 357,
              "startColumn": 47,
              "endColumn": 91,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(n)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/ColorRefinementAlgorithm.java",
              "startLine": 356,
              "endLine": 356,
              "startColumn": 33,
              "endColumn": 77,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(n)"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from public ColoringRepresentation(graph Graph<V,E>, alpha Coloring<V>) in class org.jgrapht.alg.color.ColorRefinementAlgorithm.ColoringRepresentation & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/ColorRefinementAlgorithm.java",
              "startLine": 352,
              "endLine": 373,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public ColoringRepresentation(graph Graph<V,E>, alpha Coloring<V>)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/ColorRefinementAlgorithm.java",
              "startLine": 355,
              "endLine": 355,
              "startColumn": 13,
              "endColumn": 50,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/ColorRefinementAlgorithm.java",
              "startLine": 353,
              "endLine": 374,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public ColoringRepresentation(graph Graph<V,E>, alpha Coloring<V>)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/ColorRefinementAlgorithm.java",
              "startLine": 357,
              "endLine": 357,
              "startColumn": 47,
              "endColumn": 91,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(n)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/ColorRefinementAlgorithm.java",
              "startLine": 356,
              "endLine": 356,
              "startColumn": 33,
              "endColumn": 77,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(n)"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from protected getVertexOrdering() : Iterable<V> in class org.jgrapht.alg.color.LargestDegreeFirstColoring & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/LargestDegreeFirstColoring.java",
              "startLine": 55,
              "endLine": 106,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "protected getVertexOrdering() : Iterable<V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/LargestDegreeFirstColoring.java",
              "startLine": 65,
              "endLine": 65,
              "startColumn": 9,
              "endColumn": 51,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/LargestDegreeFirstColoring.java",
              "startLine": 56,
              "endLine": 107,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "protected getVertexOrdering() : Iterable<V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/LargestDegreeFirstColoring.java",
              "startLine": 66,
              "endLine": 66,
              "startColumn": 34,
              "endColumn": 78,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(n)"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from public getColoring() : Coloring<V> in class org.jgrapht.alg.color.SaturationDegreeColoring & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/SaturationDegreeColoring.java",
              "startLine": 75,
              "endLine": 163,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public getColoring() : Coloring<V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/SaturationDegreeColoring.java",
              "startLine": 95,
              "endLine": 95,
              "startColumn": 9,
              "endColumn": 51,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/SaturationDegreeColoring.java",
              "startLine": 76,
              "endLine": 164,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public getColoring() : Coloring<V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/SaturationDegreeColoring.java",
              "startLine": 96,
              "endLine": 96,
              "startColumn": 34,
              "endColumn": 78,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(n)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/SaturationDegreeColoring.java",
              "startLine": 90,
              "endLine": 90,
              "startColumn": 38,
              "endColumn": 82,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(n)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/SaturationDegreeColoring.java",
              "startLine": 89,
              "endLine": 89,
              "startColumn": 36,
              "endColumn": 80,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(n)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/SaturationDegreeColoring.java",
              "startLine": 88,
              "endLine": 88,
              "startColumn": 34,
              "endColumn": 78,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(n)"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from public getColoring() : Coloring<V> in class org.jgrapht.alg.color.SaturationDegreeColoring & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/SaturationDegreeColoring.java",
              "startLine": 75,
              "endLine": 163,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public getColoring() : Coloring<V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/SaturationDegreeColoring.java",
              "startLine": 89,
              "endLine": 89,
              "startColumn": 9,
              "endColumn": 55,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/SaturationDegreeColoring.java",
              "startLine": 76,
              "endLine": 164,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public getColoring() : Coloring<V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/SaturationDegreeColoring.java",
              "startLine": 96,
              "endLine": 96,
              "startColumn": 34,
              "endColumn": 78,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(n)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/SaturationDegreeColoring.java",
              "startLine": 90,
              "endLine": 90,
              "startColumn": 38,
              "endColumn": 82,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(n)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/SaturationDegreeColoring.java",
              "startLine": 89,
              "endLine": 89,
              "startColumn": 36,
              "endColumn": 80,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(n)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/SaturationDegreeColoring.java",
              "startLine": 88,
              "endLine": 88,
              "startColumn": 34,
              "endColumn": 78,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(n)"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from public getColoring() : Coloring<V> in class org.jgrapht.alg.color.SaturationDegreeColoring & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/SaturationDegreeColoring.java",
              "startLine": 75,
              "endLine": 163,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public getColoring() : Coloring<V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/SaturationDegreeColoring.java",
              "startLine": 88,
              "endLine": 88,
              "startColumn": 9,
              "endColumn": 53,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/SaturationDegreeColoring.java",
              "startLine": 76,
              "endLine": 164,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public getColoring() : Coloring<V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/SaturationDegreeColoring.java",
              "startLine": 96,
              "endLine": 96,
              "startColumn": 34,
              "endColumn": 78,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(n)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/SaturationDegreeColoring.java",
              "startLine": 90,
              "endLine": 90,
              "startColumn": 38,
              "endColumn": 82,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(n)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/SaturationDegreeColoring.java",
              "startLine": 89,
              "endLine": 89,
              "startColumn": 36,
              "endColumn": 80,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(n)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/SaturationDegreeColoring.java",
              "startLine": 88,
              "endLine": 88,
              "startColumn": 34,
              "endColumn": 78,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(n)"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from public getColoring() : Coloring<V> in class org.jgrapht.alg.color.SaturationDegreeColoring & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/SaturationDegreeColoring.java",
              "startLine": 75,
              "endLine": 163,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public getColoring() : Coloring<V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/SaturationDegreeColoring.java",
              "startLine": 88,
              "endLine": 88,
              "startColumn": 9,
              "endColumn": 53,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/SaturationDegreeColoring.java",
              "startLine": 76,
              "endLine": 164,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public getColoring() : Coloring<V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/SaturationDegreeColoring.java",
              "startLine": 96,
              "endLine": 96,
              "startColumn": 34,
              "endColumn": 78,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(n)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/SaturationDegreeColoring.java",
              "startLine": 90,
              "endLine": 90,
              "startColumn": 38,
              "endColumn": 82,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(n)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/SaturationDegreeColoring.java",
              "startLine": 89,
              "endLine": 89,
              "startColumn": 36,
              "endColumn": 80,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(n)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/SaturationDegreeColoring.java",
              "startLine": 88,
              "endLine": 88,
              "startColumn": 34,
              "endColumn": 78,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(n)"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from protected getVertexOrdering() : Iterable<V> in class org.jgrapht.alg.color.SmallestDegreeLastColoring & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/SmallestDegreeLastColoring.java",
              "startLine": 58,
              "endLine": 117,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "protected getVertexOrdering() : Iterable<V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/SmallestDegreeLastColoring.java",
              "startLine": 68,
              "endLine": 68,
              "startColumn": 9,
              "endColumn": 51,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/SmallestDegreeLastColoring.java",
              "startLine": 59,
              "endLine": 118,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "protected getVertexOrdering() : Iterable<V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/SmallestDegreeLastColoring.java",
              "startLine": 69,
              "endLine": 69,
              "startColumn": 34,
              "endColumn": 78,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(n)"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from private createVertexNumber() : void in class org.jgrapht.alg.connectivity.GabowStrongConnectivityInspector & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/connectivity/GabowStrongConnectivityInspector.java",
              "startLine": 89,
              "endLine": 100,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "private createVertexNumber() : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/connectivity/GabowStrongConnectivityInspector.java",
              "startLine": 92,
              "endLine": 92,
              "startColumn": 9,
              "endColumn": 49,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/connectivity/GabowStrongConnectivityInspector.java",
              "startLine": 90,
              "endLine": 101,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "private createVertexNumber() : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/connectivity/GabowStrongConnectivityInspector.java",
              "startLine": 93,
              "endLine": 93,
              "startColumn": 32,
              "endColumn": 76,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(c)"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from private createVertexData() : void in class org.jgrapht.alg.connectivity.KosarajuStrongConnectivityInspector & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/connectivity/KosarajuStrongConnectivityInspector.java",
              "startLine": 109,
              "endLine": 116,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "private createVertexData() : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/connectivity/KosarajuStrongConnectivityInspector.java",
              "startLine": 111,
              "endLine": 111,
              "startColumn": 9,
              "endColumn": 86,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/connectivity/KosarajuStrongConnectivityInspector.java",
              "startLine": 110,
              "endLine": 117,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "private createVertexData() : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/connectivity/KosarajuStrongConnectivityInspector.java",
              "startLine": 112,
              "endLine": 112,
              "startColumn": 30,
              "endColumn": 97,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(graph.vertexSet().size())"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from private getVertexInOrder(vertexOrder List<V>) : Map<V,Integer> in class org.jgrapht.alg.cycle.ChordalGraphMinimalVertexSeparatorFinder & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/ChordalGraphMinimalVertexSeparatorFinder.java",
              "startLine": 150,
              "endLine": 166,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "private getVertexInOrder(vertexOrder List<V>) : Map<V,Integer>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/ChordalGraphMinimalVertexSeparatorFinder.java",
              "startLine": 160,
              "endLine": 160,
              "startColumn": 9,
              "endColumn": 75,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/ChordalGraphMinimalVertexSeparatorFinder.java",
              "startLine": 151,
              "endLine": 168,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "private getVertexInOrder(vertexOrder List<V>) : Map<V,Integer>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/ChordalGraphMinimalVertexSeparatorFinder.java",
              "startLine": 162,
              "endLine": 162,
              "startColumn": 13,
              "endColumn": 74,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(vertexOrder.size())"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from private getVertexInOrder(vertexOrder List<V>) : Map<V,Integer> in class org.jgrapht.alg.cycle.ChordalityInspector & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/ChordalityInspector.java",
              "startLine": 241,
              "endLine": 257,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "private getVertexInOrder(vertexOrder List<V>) : Map<V,Integer>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/ChordalityInspector.java",
              "startLine": 251,
              "endLine": 251,
              "startColumn": 9,
              "endColumn": 75,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/ChordalityInspector.java",
              "startLine": 242,
              "endLine": 259,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "private getVertexInOrder(vertexOrder List<V>) : Map<V,Integer>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/ChordalityInspector.java",
              "startLine": 253,
              "endLine": 253,
              "startColumn": 13,
              "endColumn": 74,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(vertexOrder.size())"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from private findHole(a V, b V, c V) : void in class org.jgrapht.alg.cycle.ChordalityInspector & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/ChordalityInspector.java",
              "startLine": 259,
              "endLine": 290,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "private findHole(a V, b V, c V) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/ChordalityInspector.java",
              "startLine": 281,
              "endLine": 281,
              "startColumn": 9,
              "endColumn": 75,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/ChordalityInspector.java",
              "startLine": 261,
              "endLine": 293,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "private findHole(a V, b V, c V) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/ChordalityInspector.java",
              "startLine": 284,
              "endLine": 284,
              "startColumn": 13,
              "endColumn": 80,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(graph.vertexSet().size())"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from private initMappings() : void in class org.jgrapht.alg.cycle.WeakChordalityInspector & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/WeakChordalityInspector.java",
              "startLine": 120,
              "endLine": 132,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "private initMappings() : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/WeakChordalityInspector.java",
              "startLine": 126,
              "endLine": 126,
              "startColumn": 9,
              "endColumn": 36,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/WeakChordalityInspector.java",
              "startLine": 121,
              "endLine": 133,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "private initMappings() : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/WeakChordalityInspector.java",
              "startLine": 127,
              "endLine": 127,
              "startColumn": 19,
              "endColumn": 63,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(n)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/WeakChordalityInspector.java",
              "startLine": 126,
              "endLine": 126,
              "startColumn": 20,
              "endColumn": 64,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(n)"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from private initMappings() : void in class org.jgrapht.alg.cycle.WeakChordalityInspector & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/WeakChordalityInspector.java",
              "startLine": 120,
              "endLine": 132,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "private initMappings() : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/WeakChordalityInspector.java",
              "startLine": 125,
              "endLine": 125,
              "startColumn": 9,
              "endColumn": 37,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/WeakChordalityInspector.java",
              "startLine": 121,
              "endLine": 133,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "private initMappings() : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/WeakChordalityInspector.java",
              "startLine": 127,
              "endLine": 127,
              "startColumn": 19,
              "endColumn": 63,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(n)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/WeakChordalityInspector.java",
              "startLine": 126,
              "endLine": 126,
              "startColumn": 20,
              "endColumn": 64,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(n)"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from private findHole(graph Graph<V,E>, sourceInSeparator V, source V, target V, targetInSeparator V) : GraphPath<V,E> in class org.jgrapht.alg.cycle.WeakChordalityInspector & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/WeakChordalityInspector.java",
              "startLine": 583,
              "endLine": 610,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "private findHole(graph Graph<V,E>, sourceInSeparator V, source V, target V, targetInSeparator V) : GraphPath<V,E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/WeakChordalityInspector.java",
              "startLine": 597,
              "endLine": 597,
              "startColumn": 9,
              "endColumn": 75,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/WeakChordalityInspector.java",
              "startLine": 584,
              "endLine": 612,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "private findHole(graph Graph<V,E>, sourceInSeparator V, source V, target V, targetInSeparator V) : GraphPath<V,E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/WeakChordalityInspector.java",
              "startLine": 599,
              "endLine": 599,
              "startColumn": 13,
              "endColumn": 80,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(graph.vertexSet().size())"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from private findSeparators(graph Graph<V,E>, edge E) : List<Set<V>> in class org.jgrapht.alg.cycle.WeakChordalityInspector & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/WeakChordalityInspector.java",
              "startLine": 716,
              "endLine": 755,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "private findSeparators(graph Graph<V,E>, edge E) : List<Set<V>>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/WeakChordalityInspector.java",
              "startLine": 731,
              "endLine": 731,
              "startColumn": 9,
              "endColumn": 71,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/WeakChordalityInspector.java",
              "startLine": 718,
              "endLine": 757,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "private findSeparators(graph Graph<V,E>, edge E) : List<Set<V>>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/WeakChordalityInspector.java",
              "startLine": 733,
              "endLine": 733,
              "startColumn": 31,
              "endColumn": 98,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(graph.vertexSet().size())"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from private init() : void in class org.jgrapht.alg.flow.mincost.CapacityScalingMinimumCostFlow & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/flow/mincost/CapacityScalingMinimumCostFlow.java",
              "startLine": 283,
              "endLine": 377,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "private init() : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/flow/mincost/CapacityScalingMinimumCostFlow.java",
              "startLine": 307,
              "endLine": 307,
              "startColumn": 9,
              "endColumn": 49,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/flow/mincost/CapacityScalingMinimumCostFlow.java",
              "startLine": 283,
              "endLine": 377,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "private init() : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/flow/mincost/CapacityScalingMinimumCostFlow.java",
              "startLine": 307,
              "endLine": 307,
              "startColumn": 32,
              "endColumn": 76,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(n)"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from private finish() : MinimumCostFlow<E> in class org.jgrapht.alg.flow.mincost.CapacityScalingMinimumCostFlow & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/flow/mincost/CapacityScalingMinimumCostFlow.java",
              "startLine": 592,
              "endLine": 626,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "private finish() : MinimumCostFlow<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/flow/mincost/CapacityScalingMinimumCostFlow.java",
              "startLine": 601,
              "endLine": 601,
              "startColumn": 9,
              "endColumn": 51,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/flow/mincost/CapacityScalingMinimumCostFlow.java",
              "startLine": 592,
              "endLine": 626,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "private finish() : MinimumCostFlow<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/flow/mincost/CapacityScalingMinimumCostFlow.java",
              "startLine": 601,
              "endLine": 601,
              "startColumn": 34,
              "endColumn": 78,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(m)"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from private matchVerticesWithSameLabel(root1 V, root2 V, canonicalName Map<V,Integer>[]) : void in class org.jgrapht.alg.isomorphism.AHURootedTreeIsomorphismInspector & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/AHURootedTreeIsomorphismInspector.java",
              "startLine": 141,
              "endLine": 185,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "private matchVerticesWithSameLabel(root1 V, root2 V, canonicalName Map<V,Integer>[]) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/AHURootedTreeIsomorphismInspector.java",
              "startLine": 154,
              "endLine": 154,
              "startColumn": 13,
              "endColumn": 80,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/AHURootedTreeIsomorphismInspector.java",
              "startLine": 141,
              "endLine": 186,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "private matchVerticesWithSameLabel(root1 V, root2 V, canonicalName Map<V,Integer>[]) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/AHURootedTreeIsomorphismInspector.java",
              "startLine": 155,
              "endLine": 155,
              "startColumn": 17,
              "endColumn": 77,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(tree1.degreeOf(u))"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from private isomorphismExists(root1 V, root2 V) : boolean in class org.jgrapht.alg.isomorphism.AHURootedTreeIsomorphismInspector & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/AHURootedTreeIsomorphismInspector.java",
              "startLine": 187,
              "endLine": 267,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "private isomorphismExists(root1 V, root2 V) : boolean"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/AHURootedTreeIsomorphismInspector.java",
              "startLine": 200,
              "endLine": 200,
              "startColumn": 9,
              "endColumn": 68,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/AHURootedTreeIsomorphismInspector.java",
              "startLine": 188,
              "endLine": 268,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "private isomorphismExists(root1 V, root2 V) : boolean"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/AHURootedTreeIsomorphismInspector.java",
              "startLine": 201,
              "endLine": 201,
              "startColumn": 28,
              "endColumn": 95,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(tree2.vertexSet().size())"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/AHURootedTreeIsomorphismInspector.java",
              "startLine": 200,
              "endLine": 200,
              "startColumn": 28,
              "endColumn": 95,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(tree1.vertexSet().size())"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from private isomorphismExists(root1 V, root2 V) : boolean in class org.jgrapht.alg.isomorphism.AHURootedTreeIsomorphismInspector & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/AHURootedTreeIsomorphismInspector.java",
              "startLine": 187,
              "endLine": 267,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "private isomorphismExists(root1 V, root2 V) : boolean"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/AHURootedTreeIsomorphismInspector.java",
              "startLine": 199,
              "endLine": 199,
              "startColumn": 9,
              "endColumn": 68,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/AHURootedTreeIsomorphismInspector.java",
              "startLine": 188,
              "endLine": 268,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "private isomorphismExists(root1 V, root2 V) : boolean"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/AHURootedTreeIsomorphismInspector.java",
              "startLine": 201,
              "endLine": 201,
              "startColumn": 28,
              "endColumn": 95,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(tree2.vertexSet().size())"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/AHURootedTreeIsomorphismInspector.java",
              "startLine": 200,
              "endLine": 200,
              "startColumn": 28,
              "endColumn": 95,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(tree1.vertexSet().size())"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from public compose(otherMapping IsomorphicGraphMapping<V,E>) : IsomorphicGraphMapping<V,E> in class org.jgrapht.alg.isomorphism.IsomorphicGraphMapping & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/IsomorphicGraphMapping.java",
              "startLine": 305,
              "endLine": 331,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public compose(otherMapping IsomorphicGraphMapping<V,E>) : IsomorphicGraphMapping<V,E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/IsomorphicGraphMapping.java",
              "startLine": 322,
              "endLine": 322,
              "startColumn": 9,
              "endColumn": 63,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/IsomorphicGraphMapping.java",
              "startLine": 308,
              "endLine": 334,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public compose(otherMapping IsomorphicGraphMapping<V,E>) : IsomorphicGraphMapping<V,E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/IsomorphicGraphMapping.java",
              "startLine": 325,
              "endLine": 325,
              "startColumn": 26,
              "endColumn": 90,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(forwardMapping.size())"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/IsomorphicGraphMapping.java",
              "startLine": 324,
              "endLine": 324,
              "startColumn": 26,
              "endColumn": 90,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(forwardMapping.size())"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from public compose(otherMapping IsomorphicGraphMapping<V,E>) : IsomorphicGraphMapping<V,E> in class org.jgrapht.alg.isomorphism.IsomorphicGraphMapping & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/IsomorphicGraphMapping.java",
              "startLine": 305,
              "endLine": 331,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public compose(otherMapping IsomorphicGraphMapping<V,E>) : IsomorphicGraphMapping<V,E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/IsomorphicGraphMapping.java",
              "startLine": 321,
              "endLine": 321,
              "startColumn": 9,
              "endColumn": 63,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/IsomorphicGraphMapping.java",
              "startLine": 308,
              "endLine": 334,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public compose(otherMapping IsomorphicGraphMapping<V,E>) : IsomorphicGraphMapping<V,E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/IsomorphicGraphMapping.java",
              "startLine": 325,
              "endLine": 325,
              "startColumn": 26,
              "endColumn": 90,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(forwardMapping.size())"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/IsomorphicGraphMapping.java",
              "startLine": 324,
              "endLine": 324,
              "startColumn": 26,
              "endColumn": 90,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(forwardMapping.size())"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from public identity(graph Graph<V,E>) : IsomorphicGraphMapping<V,E> in class org.jgrapht.alg.isomorphism.IsomorphicGraphMapping & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/IsomorphicGraphMapping.java",
              "startLine": 333,
              "endLine": 353,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public identity(graph Graph<V,E>) : IsomorphicGraphMapping<V,E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/IsomorphicGraphMapping.java",
              "startLine": 345,
              "endLine": 345,
              "startColumn": 9,
              "endColumn": 66,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/IsomorphicGraphMapping.java",
              "startLine": 336,
              "endLine": 356,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public identity(graph Graph<V,E>) : IsomorphicGraphMapping<V,E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/IsomorphicGraphMapping.java",
              "startLine": 348,
              "endLine": 348,
              "startColumn": 26,
              "endColumn": 93,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(graph.vertexSet().size())"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/IsomorphicGraphMapping.java",
              "startLine": 347,
              "endLine": 347,
              "startColumn": 26,
              "endColumn": 93,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(graph.vertexSet().size())"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from public identity(graph Graph<V,E>) : IsomorphicGraphMapping<V,E> in class org.jgrapht.alg.isomorphism.IsomorphicGraphMapping & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/IsomorphicGraphMapping.java",
              "startLine": 333,
              "endLine": 353,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public identity(graph Graph<V,E>) : IsomorphicGraphMapping<V,E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/IsomorphicGraphMapping.java",
              "startLine": 344,
              "endLine": 344,
              "startColumn": 9,
              "endColumn": 66,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/IsomorphicGraphMapping.java",
              "startLine": 336,
              "endLine": 356,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public identity(graph Graph<V,E>) : IsomorphicGraphMapping<V,E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/IsomorphicGraphMapping.java",
              "startLine": 348,
              "endLine": 348,
              "startColumn": 26,
              "endColumn": 93,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(graph.vertexSet().size())"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/IsomorphicGraphMapping.java",
              "startLine": 347,
              "endLine": 347,
              "startColumn": 26,
              "endColumn": 93,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(graph.vertexSet().size())"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from private initialize() : void in class org.jgrapht.alg.matching.SparseEdmondsMaximumCardinalityMatching.Algorithm & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/SparseEdmondsMaximumCardinalityMatching.java",
              "startLine": 172,
              "endLine": 207,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "private initialize() : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/SparseEdmondsMaximumCardinalityMatching.java",
              "startLine": 177,
              "endLine": 177,
              "startColumn": 13,
              "endColumn": 56,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/SparseEdmondsMaximumCardinalityMatching.java",
              "startLine": 173,
              "endLine": 208,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "private initialize() : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/SparseEdmondsMaximumCardinalityMatching.java",
              "startLine": 178,
              "endLine": 178,
              "startColumn": 35,
              "endColumn": 83,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(nodes)"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from private initGraph() : double in class org.jgrapht.alg.matching.blossom.v5.BlossomVInitializer & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/blossom/v5/BlossomVInitializer.java",
              "startLine": 194,
              "endLine": 232,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "private initGraph() : double"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/blossom/v5/BlossomVInitializer.java",
              "startLine": 204,
              "endLine": 204,
              "startColumn": 9,
              "endColumn": 69,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/blossom/v5/BlossomVInitializer.java",
              "startLine": 195,
              "endLine": 233,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "private initGraph() : double"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/blossom/v5/BlossomVInitializer.java",
              "startLine": 205,
              "endLine": 205,
              "startColumn": 46,
              "endColumn": 96,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(nodeNum)"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from public UnweightedSpannerAlgorithm() in class org.jgrapht.alg.spanning.GreedyMultiplicativeSpanner.UnweightedSpannerAlgorithm & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/spanning/GreedyMultiplicativeSpanner.java",
              "startLine": 148,
              "endLine": 160,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public UnweightedSpannerAlgorithm()"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/spanning/GreedyMultiplicativeSpanner.java",
              "startLine": 158,
              "endLine": 158,
              "startColumn": 13,
              "endColumn": 70,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/spanning/GreedyMultiplicativeSpanner.java",
              "startLine": 149,
              "endLine": 161,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public UnweightedSpannerAlgorithm()"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/spanning/GreedyMultiplicativeSpanner.java",
              "startLine": 159,
              "endLine": 159,
              "startColumn": 30,
              "endColumn": 97,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(graph.vertexSet().size())"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from public generateGraph(target Graph<V,E>, resultMap Map<String,V>) : void in class org.jgrapht.generate.GnpRandomGraphGenerator & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/GnpRandomGraphGenerator.java",
              "startLine": 115,
              "endLine": 183,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public generateGraph(target Graph<V,E>, resultMap Map<String,V>) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/GnpRandomGraphGenerator.java",
              "startLine": 136,
              "endLine": 136,
              "startColumn": 9,
              "endColumn": 53,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/GnpRandomGraphGenerator.java",
              "startLine": 116,
              "endLine": 184,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public generateGraph(target Graph<V,E>, resultMap Map<String,V>) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/GnpRandomGraphGenerator.java",
              "startLine": 137,
              "endLine": 137,
              "startColumn": 36,
              "endColumn": 80,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(n)"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from package BucketList(vertices Collection<V>) in class org.jgrapht.traverse.LexBreadthFirstIterator.BucketList & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/LexBreadthFirstIterator.java",
              "startLine": 194,
              "endLine": 208,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "package BucketList(vertices Collection<V>)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/LexBreadthFirstIterator.java",
              "startLine": 204,
              "endLine": 204,
              "startColumn": 13,
              "endColumn": 56,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/LexBreadthFirstIterator.java",
              "startLine": 195,
              "endLine": 209,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "package BucketList(vertices Collection<V>)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/LexBreadthFirstIterator.java",
              "startLine": 205,
              "endLine": 205,
              "startColumn": 25,
              "endColumn": 83,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(vertices.size())"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from public MaximumCardinalityIterator(graph Graph<V,E>) in class org.jgrapht.traverse.MaximumCardinalityIterator & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/MaximumCardinalityIterator.java",
              "startLine": 71,
              "endLine": 90,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public MaximumCardinalityIterator(graph Graph<V,E>)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/MaximumCardinalityIterator.java",
              "startLine": 84,
              "endLine": 84,
              "startColumn": 13,
              "endColumn": 70,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/MaximumCardinalityIterator.java",
              "startLine": 72,
              "endLine": 91,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public MaximumCardinalityIterator(graph Graph<V,E>)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/traverse/MaximumCardinalityIterator.java",
              "startLine": 85,
              "endLine": 85,
              "startColumn": 30,
              "endColumn": 97,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(graph.vertexSet().size())"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from public VertexToIntegerMapping(vertices Set<V>) in class org.jgrapht.util.VertexToIntegerMapping & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/VertexToIntegerMapping.java",
              "startLine": 40,
              "endLine": 57,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public VertexToIntegerMapping(vertices Set<V>)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/VertexToIntegerMapping.java",
              "startLine": 50,
              "endLine": 50,
              "startColumn": 9,
              "endColumn": 52,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/VertexToIntegerMapping.java",
              "startLine": 40,
              "endLine": 57,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public VertexToIntegerMapping(vertices Set<V>)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/VertexToIntegerMapping.java",
              "startLine": 50,
              "endLine": 50,
              "startColumn": 21,
              "endColumn": 79,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(vertices.size())"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from public VertexToIntegerMapping(vertices List<V>) in class org.jgrapht.util.VertexToIntegerMapping & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/VertexToIntegerMapping.java",
              "startLine": 59,
              "endLine": 83,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public VertexToIntegerMapping(vertices List<V>)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/VertexToIntegerMapping.java",
              "startLine": 71,
              "endLine": 71,
              "startColumn": 9,
              "endColumn": 52,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/VertexToIntegerMapping.java",
              "startLine": 59,
              "endLine": 83,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public VertexToIntegerMapping(vertices List<V>)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/VertexToIntegerMapping.java",
              "startLine": 71,
              "endLine": 71,
              "startColumn": 21,
              "endColumn": 79,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(vertices.size())"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from public VertexToIntegerMapping(vertices Collection<V>) in class org.jgrapht.util.VertexToIntegerMapping & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/VertexToIntegerMapping.java",
              "startLine": 85,
              "endLine": 107,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public VertexToIntegerMapping(vertices Collection<V>)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/VertexToIntegerMapping.java",
              "startLine": 96,
              "endLine": 96,
              "startColumn": 9,
              "endColumn": 52,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/VertexToIntegerMapping.java",
              "startLine": 85,
              "endLine": 107,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public VertexToIntegerMapping(vertices Collection<V>)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/VertexToIntegerMapping.java",
              "startLine": 96,
              "endLine": 96,
              "startColumn": 21,
              "endColumn": 79,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(vertices.size())"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V> extracted from public generateGraph(target Graph<V,E>, resultMap Map<String,V>) : void in class org.jgrapht.generate.GnmRandomGraphGenerator & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/GnmRandomGraphGenerator.java",
              "startLine": 137,
              "endLine": 233,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public generateGraph(target Graph<V,E>, resultMap Map<String,V>) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/GnmRandomGraphGenerator.java",
              "startLine": 178,
              "endLine": 178,
              "startColumn": 9,
              "endColumn": 53,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 34,
              "endLine": 54,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashMapWithExpectedSize(expectedSize int) : HashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 53,
              "endLine": 53,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/GnmRandomGraphGenerator.java",
              "startLine": 138,
              "endLine": 234,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public generateGraph(target Graph<V,E>, resultMap Map<String,V>) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/GnmRandomGraphGenerator.java",
              "startLine": 179,
              "endLine": 179,
              "startColumn": 36,
              "endColumn": 80,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashMapWithExpectedSize(n)"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newLinkedHashMapWithExpectedSize(expectedSize int) : LinkedHashMap<K,V> extracted from public generateGraph(target Graph<V,E>, resultMap Map<String,V>) : void in class org.jgrapht.generate.GnmRandomBipartiteGraphGenerator & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/GnmRandomBipartiteGraphGenerator.java",
              "startLine": 114,
              "endLine": 193,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public generateGraph(target Graph<V,E>, resultMap Map<String,V>) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/GnmRandomBipartiteGraphGenerator.java",
              "startLine": 135,
              "endLine": 135,
              "startColumn": 9,
              "endColumn": 46,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 56,
              "endLine": 74,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newLinkedHashMapWithExpectedSize(expectedSize int) : LinkedHashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 73,
              "endLine": 73,
              "startColumn": 9,
              "endColumn": 67,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/GnmRandomBipartiteGraphGenerator.java",
              "startLine": 115,
              "endLine": 194,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public generateGraph(target Graph<V,E>, resultMap Map<String,V>) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/GnmRandomBipartiteGraphGenerator.java",
              "startLine": 136,
              "endLine": 136,
              "startColumn": 22,
              "endColumn": 73,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newLinkedHashMapWithExpectedSize(n2)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/GnmRandomBipartiteGraphGenerator.java",
              "startLine": 131,
              "endLine": 131,
              "startColumn": 22,
              "endColumn": 73,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newLinkedHashMapWithExpectedSize(n1)"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newLinkedHashMapWithExpectedSize(expectedSize int) : LinkedHashMap<K,V> extracted from public generateGraph(target Graph<V,E>, resultMap Map<String,V>) : void in class org.jgrapht.generate.GnmRandomBipartiteGraphGenerator & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/GnmRandomBipartiteGraphGenerator.java",
              "startLine": 114,
              "endLine": 193,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public generateGraph(target Graph<V,E>, resultMap Map<String,V>) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/GnmRandomBipartiteGraphGenerator.java",
              "startLine": 130,
              "endLine": 130,
              "startColumn": 9,
              "endColumn": 46,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 56,
              "endLine": 74,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newLinkedHashMapWithExpectedSize(expectedSize int) : LinkedHashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 73,
              "endLine": 73,
              "startColumn": 9,
              "endColumn": 67,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/GnmRandomBipartiteGraphGenerator.java",
              "startLine": 115,
              "endLine": 194,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public generateGraph(target Graph<V,E>, resultMap Map<String,V>) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/GnmRandomBipartiteGraphGenerator.java",
              "startLine": 136,
              "endLine": 136,
              "startColumn": 22,
              "endColumn": 73,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newLinkedHashMapWithExpectedSize(n2)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/GnmRandomBipartiteGraphGenerator.java",
              "startLine": 131,
              "endLine": 131,
              "startColumn": 22,
              "endColumn": 73,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newLinkedHashMapWithExpectedSize(n1)"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newLinkedHashMapWithExpectedSize(expectedSize int) : LinkedHashMap<K,V> extracted from public generateGraph(target Graph<V,E>, resultMap Map<String,V>) : void in class org.jgrapht.generate.GnpRandomBipartiteGraphGenerator & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/GnpRandomBipartiteGraphGenerator.java",
              "startLine": 112,
              "endLine": 166,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public generateGraph(target Graph<V,E>, resultMap Map<String,V>) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/GnpRandomBipartiteGraphGenerator.java",
              "startLine": 133,
              "endLine": 133,
              "startColumn": 9,
              "endColumn": 46,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 56,
              "endLine": 74,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newLinkedHashMapWithExpectedSize(expectedSize int) : LinkedHashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 73,
              "endLine": 73,
              "startColumn": 9,
              "endColumn": 67,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/GnpRandomBipartiteGraphGenerator.java",
              "startLine": 113,
              "endLine": 167,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public generateGraph(target Graph<V,E>, resultMap Map<String,V>) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/GnpRandomBipartiteGraphGenerator.java",
              "startLine": 134,
              "endLine": 134,
              "startColumn": 22,
              "endColumn": 73,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newLinkedHashMapWithExpectedSize(n2)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/GnpRandomBipartiteGraphGenerator.java",
              "startLine": 129,
              "endLine": 129,
              "startColumn": 22,
              "endColumn": 73,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newLinkedHashMapWithExpectedSize(n1)"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newLinkedHashMapWithExpectedSize(expectedSize int) : LinkedHashMap<K,V> extracted from public generateGraph(target Graph<V,E>, resultMap Map<String,V>) : void in class org.jgrapht.generate.GnpRandomBipartiteGraphGenerator & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/GnpRandomBipartiteGraphGenerator.java",
              "startLine": 112,
              "endLine": 166,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public generateGraph(target Graph<V,E>, resultMap Map<String,V>) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/GnpRandomBipartiteGraphGenerator.java",
              "startLine": 128,
              "endLine": 128,
              "startColumn": 9,
              "endColumn": 46,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 56,
              "endLine": 74,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newLinkedHashMapWithExpectedSize(expectedSize int) : LinkedHashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 73,
              "endLine": 73,
              "startColumn": 9,
              "endColumn": 67,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/GnpRandomBipartiteGraphGenerator.java",
              "startLine": 113,
              "endLine": 167,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public generateGraph(target Graph<V,E>, resultMap Map<String,V>) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/GnpRandomBipartiteGraphGenerator.java",
              "startLine": 134,
              "endLine": 134,
              "startColumn": 22,
              "endColumn": 73,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newLinkedHashMapWithExpectedSize(n2)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/GnpRandomBipartiteGraphGenerator.java",
              "startLine": 129,
              "endLine": 129,
              "startColumn": 22,
              "endColumn": 73,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newLinkedHashMapWithExpectedSize(n1)"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newLinkedHashMapWithExpectedSize(expectedSize int) : LinkedHashMap<K,V> extracted from public generateGraph(target Graph<V,E>, resultMap Map<String,V>) : void in class org.jgrapht.generate.WattsStrogatzGraphGenerator & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/WattsStrogatzGraphGenerator.java",
              "startLine": 140,
              "endLine": 193,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public generateGraph(target Graph<V,E>, resultMap Map<String,V>) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/WattsStrogatzGraphGenerator.java",
              "startLine": 159,
              "endLine": 159,
              "startColumn": 9,
              "endColumn": 54,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 56,
              "endLine": 74,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newLinkedHashMapWithExpectedSize(expectedSize int) : LinkedHashMap<K,V>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 73,
              "endLine": 73,
              "startColumn": 9,
              "endColumn": 67,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/WattsStrogatzGraphGenerator.java",
              "startLine": 141,
              "endLine": 194,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public generateGraph(target Graph<V,E>, resultMap Map<String,V>) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/WattsStrogatzGraphGenerator.java",
              "startLine": 160,
              "endLine": 160,
              "startColumn": 31,
              "endColumn": 81,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newLinkedHashMapWithExpectedSize(n)"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashSetWithExpectedSize(expectedSize int) : HashSet<E> extracted from private lazyComputeColoring() : void in class org.jgrapht.alg.color.ChordalGraphColoring & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/ChordalGraphColoring.java",
              "startLine": 88,
              "endLine": 113,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "private lazyComputeColoring() : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/ChordalGraphColoring.java",
              "startLine": 100,
              "endLine": 100,
              "startColumn": 17,
              "endColumn": 85,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 76,
              "endLine": 93,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashSetWithExpectedSize(expectedSize int) : HashSet<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 92,
              "endLine": 92,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/ChordalGraphColoring.java",
              "startLine": 89,
              "endLine": 116,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "private lazyComputeColoring() : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/ChordalGraphColoring.java",
              "startLine": 103,
              "endLine": 103,
              "startColumn": 21,
              "endColumn": 83,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashSetWithExpectedSize(predecessors.size())"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashSetWithExpectedSize(expectedSize int) : HashSet<E> extracted from private computeCoConnectedComponents(graph Graph<V,E>, separator List<Pair<Integer,Integer>>) : List<List<Integer>> in class org.jgrapht.alg.cycle.WeakChordalityInspector & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/WeakChordalityInspector.java",
              "startLine": 379,
              "endLine": 437,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "private computeCoConnectedComponents(graph Graph<V,E>, separator List<Pair<Integer,Integer>>) : List<List<Integer>>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/WeakChordalityInspector.java",
              "startLine": 400,
              "endLine": 400,
              "startColumn": 9,
              "endColumn": 66,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 76,
              "endLine": 93,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashSetWithExpectedSize(expectedSize int) : HashSet<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 92,
              "endLine": 92,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/WeakChordalityInspector.java",
              "startLine": 380,
              "endLine": 438,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "private computeCoConnectedComponents(graph Graph<V,E>, separator List<Pair<Integer,Integer>>) : List<List<Integer>>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/cycle/WeakChordalityInspector.java",
              "startLine": 401,
              "endLine": 401,
              "startColumn": 34,
              "endColumn": 93,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashSetWithExpectedSize(separator.size())"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashSetWithExpectedSize(expectedSize int) : HashSet<E> extracted from private SimpleMatching(n int) in class org.jgrapht.alg.matching.DenseEdmondsMaximumCardinalityMatching.SimpleMatching & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/DenseEdmondsMaximumCardinalityMatching.java",
              "startLine": 629,
              "endLine": 636,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "private SimpleMatching(n int)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/DenseEdmondsMaximumCardinalityMatching.java",
              "startLine": 632,
              "endLine": 632,
              "startColumn": 13,
              "endColumn": 45,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 76,
              "endLine": 93,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashSetWithExpectedSize(expectedSize int) : HashSet<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 92,
              "endLine": 92,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/DenseEdmondsMaximumCardinalityMatching.java",
              "startLine": 630,
              "endLine": 637,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "private SimpleMatching(n int)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/matching/DenseEdmondsMaximumCardinalityMatching.java",
              "startLine": 633,
              "endLine": 633,
              "startColumn": 28,
              "endColumn": 72,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashSetWithExpectedSize(n)"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashSetWithExpectedSize(expectedSize int) : HashSet<E> extracted from public getSpanningTree() : SpanningTree<E> in class org.jgrapht.alg.spanning.PrimMinimumSpanningTree & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/spanning/PrimMinimumSpanningTree.java",
              "startLine": 60,
              "endLine": 124,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public getSpanningTree() : SpanningTree<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/spanning/PrimMinimumSpanningTree.java",
              "startLine": 67,
              "endLine": 67,
              "startColumn": 9,
              "endColumn": 81,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 76,
              "endLine": 93,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashSetWithExpectedSize(expectedSize int) : HashSet<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 92,
              "endLine": 92,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/spanning/PrimMinimumSpanningTree.java",
              "startLine": 60,
              "endLine": 125,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public getSpanningTree() : SpanningTree<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/spanning/PrimMinimumSpanningTree.java",
              "startLine": 68,
              "endLine": 68,
              "startColumn": 13,
              "endColumn": 76,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashSetWithExpectedSize(g.vertexSet().size())"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashSetWithExpectedSize(expectedSize int) : HashSet<E> extracted from public getTour(graph Graph<V,E>) : GraphPath<V,E> in class org.jgrapht.alg.tour.ChristofidesThreeHalvesApproxMetricTSP & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/tour/ChristofidesThreeHalvesApproxMetricTSP.java",
              "startLine": 87,
              "endLine": 170,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public getTour(graph Graph<V,E>) : GraphPath<V,E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/tour/ChristofidesThreeHalvesApproxMetricTSP.java",
              "startLine": 150,
              "endLine": 150,
              "startColumn": 9,
              "endColumn": 43,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 76,
              "endLine": 93,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashSetWithExpectedSize(expectedSize int) : HashSet<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 92,
              "endLine": 92,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/tour/ChristofidesThreeHalvesApproxMetricTSP.java",
              "startLine": 88,
              "endLine": 171,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public getTour(graph Graph<V,E>) : GraphPath<V,E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/tour/ChristofidesThreeHalvesApproxMetricTSP.java",
              "startLine": 151,
              "endLine": 151,
              "startColumn": 26,
              "endColumn": 70,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashSetWithExpectedSize(n)"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newHashSetWithExpectedSize(expectedSize int) : HashSet<E> extracted from public getTour(graph Graph<V,E>) : GraphPath<V,E> in class org.jgrapht.alg.tour.TwoApproxMetricTSP & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/tour/TwoApproxMetricTSP.java",
              "startLine": 63,
              "endLine": 137,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public getTour(graph Graph<V,E>) : GraphPath<V,E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/tour/TwoApproxMetricTSP.java",
              "startLine": 109,
              "endLine": 109,
              "startColumn": 9,
              "endColumn": 41,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 76,
              "endLine": 93,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newHashSetWithExpectedSize(expectedSize int) : HashSet<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 92,
              "endLine": 92,
              "startColumn": 9,
              "endColumn": 61,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/tour/TwoApproxMetricTSP.java",
              "startLine": 64,
              "endLine": 138,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public getTour(graph Graph<V,E>) : GraphPath<V,E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/tour/TwoApproxMetricTSP.java",
              "startLine": 110,
              "endLine": 110,
              "startColumn": 24,
              "endColumn": 68,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newHashSetWithExpectedSize(n)"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newLinkedHashSetWithExpectedSize(expectedSize int) : LinkedHashSet<E> extracted from private calculateColorDegrees(refiningColor int, rep ColoringRepresentation) : Set<Integer> in class org.jgrapht.alg.color.ColorRefinementAlgorithm & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/ColorRefinementAlgorithm.java",
              "startLine": 110,
              "endLine": 160,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "private calculateColorDegrees(refiningColor int, rep ColoringRepresentation) : Set<Integer>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/ColorRefinementAlgorithm.java",
              "startLine": 121,
              "endLine": 121,
              "startColumn": 9,
              "endColumn": 62,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 95,
              "endLine": 112,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newLinkedHashSetWithExpectedSize(expectedSize int) : LinkedHashSet<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 111,
              "endLine": 111,
              "startColumn": 9,
              "endColumn": 67,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/ColorRefinementAlgorithm.java",
              "startLine": 111,
              "endLine": 161,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "private calculateColorDegrees(refiningColor int, rep ColoringRepresentation) : Set<Integer>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/color/ColorRefinementAlgorithm.java",
              "startLine": 122,
              "endLine": 122,
              "startColumn": 39,
              "endColumn": 89,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newLinkedHashSetWithExpectedSize(n)"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newLinkedHashSetWithExpectedSize(expectedSize int) : LinkedHashSet<E> extracted from public CompleteBipartiteGraphGenerator(partitionA int, partitionB int) in class org.jgrapht.generate.CompleteBipartiteGraphGenerator & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/CompleteBipartiteGraphGenerator.java",
              "startLine": 41,
              "endLine": 56,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public CompleteBipartiteGraphGenerator(partitionA int, partitionB int)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/CompleteBipartiteGraphGenerator.java",
              "startLine": 55,
              "endLine": 55,
              "startColumn": 9,
              "endColumn": 52,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 95,
              "endLine": 112,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newLinkedHashSetWithExpectedSize(expectedSize int) : LinkedHashSet<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 111,
              "endLine": 111,
              "startColumn": 9,
              "endColumn": 67,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/CompleteBipartiteGraphGenerator.java",
              "startLine": 42,
              "endLine": 57,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public CompleteBipartiteGraphGenerator(partitionA int, partitionB int)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/CompleteBipartiteGraphGenerator.java",
              "startLine": 56,
              "endLine": 56,
              "startColumn": 27,
              "endColumn": 81,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newLinkedHashSetWithExpectedSize(sizeB)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/CompleteBipartiteGraphGenerator.java",
              "startLine": 55,
              "endLine": 55,
              "startColumn": 27,
              "endColumn": 81,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newLinkedHashSetWithExpectedSize(sizeA)"
            }
          ]
        },
        {
          "type": "Extract And Move Method",
          "description": "Extract And Move Method public newLinkedHashSetWithExpectedSize(expectedSize int) : LinkedHashSet<E> extracted from public CompleteBipartiteGraphGenerator(partitionA int, partitionB int) in class org.jgrapht.generate.CompleteBipartiteGraphGenerator & moved to class org.jgrapht.util.CollectionUtil",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/CompleteBipartiteGraphGenerator.java",
              "startLine": 41,
              "endLine": 56,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public CompleteBipartiteGraphGenerator(partitionA int, partitionB int)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/CompleteBipartiteGraphGenerator.java",
              "startLine": 54,
              "endLine": 54,
              "startColumn": 9,
              "endColumn": 52,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 95,
              "endLine": 112,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public newLinkedHashSetWithExpectedSize(expectedSize int) : LinkedHashSet<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/CollectionUtil.java",
              "startLine": 111,
              "endLine": 111,
              "startColumn": 9,
              "endColumn": 67,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/CompleteBipartiteGraphGenerator.java",
              "startLine": 42,
              "endLine": 57,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public CompleteBipartiteGraphGenerator(partitionA int, partitionB int)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/CompleteBipartiteGraphGenerator.java",
              "startLine": 56,
              "endLine": 56,
              "startColumn": 27,
              "endColumn": 81,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newLinkedHashSetWithExpectedSize(sizeB)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/generate/CompleteBipartiteGraphGenerator.java",
              "startLine": 55,
              "endLine": 55,
              "startColumn": 27,
              "endColumn": 81,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "CollectionUtil.newLinkedHashSetWithExpectedSize(sizeA)"
            }
          ]
        }
      ]
    },
    {
      "repository": "https://github.com/jgrapht/jgrapht.git",
      "sha1": "c999d4d635b89601413e2ec6a4ee0c3dd24c29bb",
      "url": "https://github.com/jgrapht/jgrapht/commit/c999d4d635b89601413e2ec6a4ee0c3dd24c29bb",
      "refactorings": [
        {
          "type": "Extract Method",
          "description": "Extract Method public TwoOptHeuristicTSP(k int, initializer HamiltonianCycleAlgorithm<V,E>, minCostImprovement double) extracted from public TwoOptHeuristicTSP(k int, rng Random) in class org.jgrapht.alg.tour.TwoOptHeuristicTSP",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/tour/TwoOptHeuristicTSP.java",
              "startLine": 95,
              "endLine": 108,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public TwoOptHeuristicTSP(k int, rng Random)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/tour/TwoOptHeuristicTSP.java",
              "startLine": 104,
              "endLine": 104,
              "startColumn": 13,
              "endColumn": 74,
              "codeElementType": "THROW_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/tour/TwoOptHeuristicTSP.java",
              "startLine": 106,
              "endLine": 106,
              "startColumn": 9,
              "endColumn": 20,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/tour/TwoOptHeuristicTSP.java",
              "startLine": 107,
              "endLine": 107,
              "startColumn": 9,
              "endColumn": 90,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/tour/TwoOptHeuristicTSP.java",
              "startLine": 103,
              "endLine": 105,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "IF_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/tour/TwoOptHeuristicTSP.java",
              "startLine": 103,
              "endLine": 105,
              "startColumn": 20,
              "endColumn": 10,
              "codeElementType": "BLOCK",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/tour/TwoOptHeuristicTSP.java",
              "startLine": 143,
              "endLine": 157,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public TwoOptHeuristicTSP(k int, initializer HamiltonianCycleAlgorithm<V,E>, minCostImprovement double)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/tour/TwoOptHeuristicTSP.java",
              "startLine": 152,
              "endLine": 152,
              "startColumn": 13,
              "endColumn": 74,
              "codeElementType": "THROW_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/tour/TwoOptHeuristicTSP.java",
              "startLine": 154,
              "endLine": 154,
              "startColumn": 9,
              "endColumn": 20,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/tour/TwoOptHeuristicTSP.java",
              "startLine": 155,
              "endLine": 155,
              "startColumn": 9,
              "endColumn": 107,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/tour/TwoOptHeuristicTSP.java",
              "startLine": 151,
              "endLine": 153,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "IF_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/tour/TwoOptHeuristicTSP.java",
              "startLine": 151,
              "endLine": 153,
              "startColumn": 20,
              "endColumn": 10,
              "codeElementType": "BLOCK",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/tour/TwoOptHeuristicTSP.java",
              "startLine": 133,
              "endLine": 141,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public TwoOptHeuristicTSP(k int, initializer HamiltonianCycleAlgorithm<V,E>)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/tour/TwoOptHeuristicTSP.java",
              "startLine": 140,
              "endLine": 140,
              "startColumn": 9,
              "endColumn": 36,
              "codeElementType": "CONSTRUCTOR_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "this(k,initializer,1e-8)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/tour/TwoOptHeuristicTSP.java",
              "startLine": 156,
              "endLine": 156,
              "startColumn": 9,
              "endColumn": 64,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            }
          ]
        },
        {
          "type": "Add Method Annotation",
          "description": "Add Method Annotation @Override in method public improveTour(tour GraphPath<V,E>) : GraphPath<V,E> from class org.jgrapht.alg.tour.TwoOptHeuristicTSP",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/tour/TwoOptHeuristicTSP.java",
              "startLine": 149,
              "endLine": 159,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public improveTour(tour GraphPath<V,E>) : GraphPath<V,E>"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/tour/TwoOptHeuristicTSP.java",
              "startLine": 204,
              "endLine": 204,
              "startColumn": 5,
              "endColumn": 14,
              "codeElementType": "ANNOTATION",
              "description": "added annotation",
              "codeElement": "@Override"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/tour/TwoOptHeuristicTSP.java",
              "startLine": 198,
              "endLine": 209,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with added annotation",
              "codeElement": "public improveTour(tour GraphPath<V,E>) : GraphPath<V,E>"
            }
          ]
        },
        {
          "type": "Rename Method",
          "description": "Rename Method private createRandomTour() : int[] renamed to private createInitialTour() : int[] in class org.jgrapht.alg.tour.TwoOptHeuristicTSP",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/tour/TwoOptHeuristicTSP.java",
              "startLine": 199,
              "endLine": 218,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "private createRandomTour() : int[]"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/tour/TwoOptHeuristicTSP.java",
              "startLine": 249,
              "endLine": 257,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "renamed method declaration",
              "codeElement": "private createInitialTour() : int[]"
            }
          ]
        }
      ]
    },
    {
      "repository": "https://github.com/jgrapht/jgrapht.git",
      "sha1": "5462ee0943f573d9e15df423ef87dfc8f97e3cbc",
      "url": "https://github.com/jgrapht/jgrapht/commit/5462ee0943f573d9e15df423ef87dfc8f97e3cbc",
      "refactorings": [
        {
          "type": "Rename Method",
          "description": "Rename Method public add(value E) : ListNode<E> renamed to public addNodeFirst(node ListNode<E>) : void in class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 108,
              "endLine": 117,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public add(value E) : ListNode<E>"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 297,
              "endLine": 311,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "renamed method declaration",
              "codeElement": "public addNodeFirst(node ListNode<E>) : void"
            }
          ]
        },
        {
          "type": "Rename Method",
          "description": "Rename Method public remove(node ListNode<E>) : void renamed to private unlink(node ListNodeImpl<E>) : boolean in class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 215,
              "endLine": 232,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public remove(node ListNode<E>) : void"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 240,
              "endLine": 259,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "renamed method declaration",
              "codeElement": "private unlink(node ListNodeImpl<E>) : boolean"
            }
          ]
        },
        {
          "type": "Split Method",
          "description": "Split Method public getFirstElement() : E to [public removeFirst() : E, public removeLast() : E] in class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 234,
              "endLine": 244,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public getFirstElement() : E"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 695,
              "endLine": 708,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "split method declaration",
              "codeElement": "public removeFirst() : E"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 710,
              "endLine": 723,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "split method declaration",
              "codeElement": "public removeLast() : E"
            }
          ]
        },
        {
          "type": "Rename Method",
          "description": "Rename Method public getLastElement() : E renamed to public getLastNode() : ListNode<E> in class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 246,
              "endLine": 256,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public getLastElement() : E"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 373,
              "endLine": 388,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "renamed method declaration",
              "codeElement": "public getLastNode() : ListNode<E>"
            }
          ]
        },
        {
          "type": "Rename Method",
          "description": "Rename Method public getNode(element E) : ListNode<E> renamed to public get(index int) : E in class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 258,
              "endLine": 277,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public getNode(element E) : ListNode<E>"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 635,
              "endLine": 642,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "renamed method declaration",
              "codeElement": "public get(index int) : E"
            }
          ]
        },
        {
          "type": "Rename Method",
          "description": "Rename Method private unlink(target ListNode<E>) : void renamed to private removeListNode(node ListNodeImpl<E>) : boolean in class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 279,
              "endLine": 290,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "private unlink(target ListNode<E>) : void"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 156,
              "endLine": 181,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "renamed method declaration",
              "codeElement": "private removeListNode(node ListNodeImpl<E>) : boolean"
            }
          ]
        },
        {
          "type": "Rename Method",
          "description": "Rename Method private linkBefore(node ListNode<E>, target ListNode<E>) : void renamed to private link(predecessor ListNodeImpl<E>, successor ListNodeImpl<E>) : void in class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 292,
              "endLine": 303,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "private linkBefore(node ListNode<E>, target ListNode<E>) : void"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 183,
              "endLine": 194,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "renamed method declaration",
              "codeElement": "private link(predecessor ListNodeImpl<E>, successor ListNodeImpl<E>) : void"
            }
          ]
        },
        {
          "type": "Extract Method",
          "description": "Extract Method private tail() : ListNodeImpl<E> extracted from public invert() : void in class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 119,
              "endLine": 139,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public invert() : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 129,
              "endLine": 129,
              "startColumn": 9,
              "endColumn": 41,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 69,
              "endLine": 72,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "private tail() : ListNodeImpl<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 71,
              "endLine": 71,
              "startColumn": 9,
              "endColumn": 26,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 886,
              "endLine": 909,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public invert() : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 897,
              "endLine": 897,
              "startColumn": 35,
              "endColumn": 41,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "tail()"
            }
          ]
        },
        {
          "type": "Extract Method",
          "description": "Extract Method private linkListIntoThisBefore(index int, list DoublyLinkedList<E>) : void extracted from public append(list DoublyLinkedList<E>) : void in class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 141,
              "endLine": 160,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public append(list DoublyLinkedList<E>) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 150,
              "endLine": 150,
              "startColumn": 17,
              "endColumn": 34,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 156,
              "endLine": 156,
              "startColumn": 13,
              "endColumn": 30,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 149,
              "endLine": 151,
              "startColumn": 28,
              "endColumn": 14,
              "codeElementType": "BLOCK",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 216,
              "endLine": 238,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "private linkListIntoThisBefore(index int, list DoublyLinkedList<E>) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 233,
              "endLine": 233,
              "startColumn": 17,
              "endColumn": 34,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 237,
              "endLine": 237,
              "startColumn": 9,
              "endColumn": 26,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 232,
              "endLine": 234,
              "startColumn": 29,
              "endColumn": 14,
              "codeElementType": "BLOCK",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 911,
              "endLine": 925,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public moveFrom(index int, movedList DoublyLinkedList<E>) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 924,
              "endLine": 924,
              "startColumn": 9,
              "endColumn": 49,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "linkListIntoThisBefore(index,movedList)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 219,
              "endLine": 219,
              "startColumn": 9,
              "endColumn": 33,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 220,
              "endLine": 220,
              "startColumn": 9,
              "endColumn": 32,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 226,
              "endLine": 226,
              "startColumn": 13,
              "endColumn": 89,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 228,
              "endLine": 228,
              "startColumn": 13,
              "endColumn": 52,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 229,
              "endLine": 229,
              "startColumn": 13,
              "endColumn": 43,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 230,
              "endLine": 230,
              "startColumn": 13,
              "endColumn": 37,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 224,
              "endLine": 224,
              "startColumn": 13,
              "endColumn": 30,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 223,
              "endLine": 225,
              "startColumn": 32,
              "endColumn": 10,
              "codeElementType": "BLOCK",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 232,
              "endLine": 234,
              "startColumn": 13,
              "endColumn": 14,
              "codeElementType": "IF_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 225,
              "endLine": 235,
              "startColumn": 16,
              "endColumn": 10,
              "codeElementType": "BLOCK",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 223,
              "endLine": 235,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "IF_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            }
          ]
        },
        {
          "type": "Extract Method",
          "description": "Extract Method private tail() : ListNodeImpl<E> extracted from public append(list DoublyLinkedList<E>) : void in class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 141,
              "endLine": 160,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public append(list DoublyLinkedList<E>) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 157,
              "endLine": 157,
              "startColumn": 13,
              "endColumn": 24,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 69,
              "endLine": 72,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "private tail() : ListNodeImpl<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 71,
              "endLine": 71,
              "startColumn": 9,
              "endColumn": 26,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 911,
              "endLine": 925,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public moveFrom(index int, movedList DoublyLinkedList<E>) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 228,
              "endLine": 228,
              "startColumn": 40,
              "endColumn": 51,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "list.tail()"
            }
          ]
        },
        {
          "type": "Extract Method",
          "description": "Extract Method private moveAllListNodes(list DoublyLinkedList<E>) : void extracted from public append(list DoublyLinkedList<E>) : void in class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 141,
              "endLine": 160,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public append(list DoublyLinkedList<E>) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 154,
              "endLine": 154,
              "startColumn": 13,
              "endColumn": 31,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 155,
              "endLine": 155,
              "startColumn": 13,
              "endColumn": 27,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 137,
              "endLine": 154,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "private moveAllListNodes(list DoublyLinkedList<E>) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 150,
              "endLine": 150,
              "startColumn": 9,
              "endColumn": 27,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 151,
              "endLine": 151,
              "startColumn": 9,
              "endColumn": 23,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 911,
              "endLine": 925,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public moveFrom(index int, movedList DoublyLinkedList<E>) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 220,
              "endLine": 220,
              "startColumn": 9,
              "endColumn": 31,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "moveAllListNodes(list)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 146,
              "endLine": 146,
              "startColumn": 13,
              "endColumn": 50,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 147,
              "endLine": 147,
              "startColumn": 13,
              "endColumn": 38,
              "codeElementType": "ASSERT_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 152,
              "endLine": 152,
              "startColumn": 9,
              "endColumn": 20,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 153,
              "endLine": 153,
              "startColumn": 9,
              "endColumn": 25,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 148,
              "endLine": 148,
              "startColumn": 13,
              "endColumn": 30,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 145,
              "endLine": 149,
              "startColumn": 89,
              "endColumn": 10,
              "codeElementType": "BLOCK",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 145,
              "endLine": 149,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "FOR_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            }
          ]
        },
        {
          "type": "Extract Method",
          "description": "Extract Method private linkListIntoThisBefore(index int, list DoublyLinkedList<E>) : void extracted from public prepend(list DoublyLinkedList<E>) : void in class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 162,
              "endLine": 180,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public prepend(list DoublyLinkedList<E>) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 173,
              "endLine": 173,
              "startColumn": 13,
              "endColumn": 30,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 177,
              "endLine": 177,
              "startColumn": 13,
              "endColumn": 30,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 169,
              "endLine": 179,
              "startColumn": 30,
              "endColumn": 10,
              "codeElementType": "BLOCK",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 216,
              "endLine": 238,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "private linkListIntoThisBefore(index int, list DoublyLinkedList<E>) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 224,
              "endLine": 224,
              "startColumn": 13,
              "endColumn": 30,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 237,
              "endLine": 237,
              "startColumn": 9,
              "endColumn": 26,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 223,
              "endLine": 225,
              "startColumn": 32,
              "endColumn": 10,
              "codeElementType": "BLOCK",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 911,
              "endLine": 925,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public moveFrom(index int, movedList DoublyLinkedList<E>) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 924,
              "endLine": 924,
              "startColumn": 9,
              "endColumn": 49,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "linkListIntoThisBefore(index,movedList)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 219,
              "endLine": 219,
              "startColumn": 9,
              "endColumn": 33,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 220,
              "endLine": 220,
              "startColumn": 9,
              "endColumn": 32,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 226,
              "endLine": 226,
              "startColumn": 13,
              "endColumn": 89,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 228,
              "endLine": 228,
              "startColumn": 13,
              "endColumn": 52,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 229,
              "endLine": 229,
              "startColumn": 13,
              "endColumn": 43,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 230,
              "endLine": 230,
              "startColumn": 13,
              "endColumn": 37,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 233,
              "endLine": 233,
              "startColumn": 17,
              "endColumn": 34,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 232,
              "endLine": 234,
              "startColumn": 29,
              "endColumn": 14,
              "codeElementType": "BLOCK",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 232,
              "endLine": 234,
              "startColumn": 13,
              "endColumn": 14,
              "codeElementType": "IF_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 225,
              "endLine": 235,
              "startColumn": 16,
              "endColumn": 10,
              "codeElementType": "BLOCK",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 223,
              "endLine": 235,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "IF_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            }
          ]
        },
        {
          "type": "Extract Method",
          "description": "Extract Method private tail() : ListNodeImpl<E> extracted from public prepend(list DoublyLinkedList<E>) : void in class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 162,
              "endLine": 180,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public prepend(list DoublyLinkedList<E>) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 178,
              "endLine": 178,
              "startColumn": 13,
              "endColumn": 24,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 69,
              "endLine": 72,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "private tail() : ListNodeImpl<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 71,
              "endLine": 71,
              "startColumn": 9,
              "endColumn": 26,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 911,
              "endLine": 925,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public moveFrom(index int, movedList DoublyLinkedList<E>) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 228,
              "endLine": 228,
              "startColumn": 40,
              "endColumn": 51,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "list.tail()"
            }
          ]
        },
        {
          "type": "Extract Method",
          "description": "Extract Method private moveAllListNodes(list DoublyLinkedList<E>) : void extracted from public prepend(list DoublyLinkedList<E>) : void in class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 162,
              "endLine": 180,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public prepend(list DoublyLinkedList<E>) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 174,
              "endLine": 174,
              "startColumn": 13,
              "endColumn": 31,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 176,
              "endLine": 176,
              "startColumn": 13,
              "endColumn": 27,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 137,
              "endLine": 154,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "private moveAllListNodes(list DoublyLinkedList<E>) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 150,
              "endLine": 150,
              "startColumn": 9,
              "endColumn": 27,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 151,
              "endLine": 151,
              "startColumn": 9,
              "endColumn": 23,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 911,
              "endLine": 925,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public moveFrom(index int, movedList DoublyLinkedList<E>) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 220,
              "endLine": 220,
              "startColumn": 9,
              "endColumn": 31,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "moveAllListNodes(list)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 146,
              "endLine": 146,
              "startColumn": 13,
              "endColumn": 50,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 147,
              "endLine": 147,
              "startColumn": 13,
              "endColumn": 38,
              "codeElementType": "ASSERT_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 152,
              "endLine": 152,
              "startColumn": 9,
              "endColumn": 20,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 153,
              "endLine": 153,
              "startColumn": 9,
              "endColumn": 25,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 148,
              "endLine": 148,
              "startColumn": 13,
              "endColumn": 30,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 145,
              "endLine": 149,
              "startColumn": 89,
              "endColumn": 10,
              "codeElementType": "BLOCK",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 145,
              "endLine": 149,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "FOR_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            }
          ]
        },
        {
          "type": "Extract Method",
          "description": "Extract Method private linkLast(node ListNodeImpl<E>) : void extracted from public addLast(value E) : ListNode<E> in class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 182,
              "endLine": 199,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public addLast(value E) : ListNode<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 194,
              "endLine": 194,
              "startColumn": 13,
              "endColumn": 38,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 191,
              "endLine": 195,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "IF_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 191,
              "endLine": 193,
              "startColumn": 24,
              "endColumn": 10,
              "codeElementType": "BLOCK",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 193,
              "endLine": 195,
              "startColumn": 16,
              "endColumn": 10,
              "codeElementType": "BLOCK",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 204,
              "endLine": 214,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "private linkLast(node ListNodeImpl<E>) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 212,
              "endLine": 212,
              "startColumn": 13,
              "endColumn": 36,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 207,
              "endLine": 213,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "IF_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 207,
              "endLine": 211,
              "startColumn": 24,
              "endColumn": 10,
              "codeElementType": "BLOCK",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 211,
              "endLine": 213,
              "startColumn": 16,
              "endColumn": 10,
              "codeElementType": "BLOCK",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 585,
              "endLine": 601,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public addElementLast(element E) : ListNode<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 287,
              "endLine": 287,
              "startColumn": 13,
              "endColumn": 31,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "linkLast(nodeImpl)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 208,
              "endLine": 208,
              "startColumn": 13,
              "endColumn": 31,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 209,
              "endLine": 209,
              "startColumn": 13,
              "endColumn": 30,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 210,
              "endLine": 210,
              "startColumn": 13,
              "endColumn": 25,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            }
          ]
        },
        {
          "type": "Extract Method",
          "description": "Extract Method private tail() : ListNodeImpl<E> extracted from public addLast(value E) : ListNode<E> in class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 182,
              "endLine": 199,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public addLast(value E) : ListNode<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 196,
              "endLine": 196,
              "startColumn": 9,
              "endColumn": 16,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 69,
              "endLine": 72,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "private tail() : ListNodeImpl<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 71,
              "endLine": 71,
              "startColumn": 9,
              "endColumn": 26,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 585,
              "endLine": 601,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public addElementLast(element E) : ListNode<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 426,
              "endLine": 426,
              "startColumn": 20,
              "endColumn": 26,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "tail()"
            }
          ]
        },
        {
          "type": "Extract Method",
          "description": "Extract Method public addElementLast(element E) : ListNode<E> extracted from public addLast(value E) : ListNode<E> in class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 182,
              "endLine": 199,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public addLast(value E) : ListNode<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 190,
              "endLine": 190,
              "startColumn": 9,
              "endColumn": 52,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 198,
              "endLine": 198,
              "startColumn": 9,
              "endColumn": 23,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 585,
              "endLine": 601,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "public addElementLast(element E) : ListNode<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 598,
              "endLine": 598,
              "startColumn": 9,
              "endColumn": 56,
              "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 600,
              "endLine": 600,
              "startColumn": 9,
              "endColumn": 21,
              "codeElementType": "RETURN_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 666,
              "endLine": 673,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public addLast(e E) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 672,
              "endLine": 672,
              "startColumn": 9,
              "endColumn": 26,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "addElementLast(e)"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 599,
              "endLine": 599,
              "startColumn": 9,
              "endColumn": 29,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 210,
              "endLine": 210,
              "startColumn": 13,
              "endColumn": 25,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "added statement in extracted method declaration",
              "codeElement": null
            }
          ]
        },
        {
          "type": "Add Method Annotation",
          "description": "Add Method Annotation @Override in method public isEmpty() : boolean from class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 90,
              "endLine": 97,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public isEmpty() : boolean"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 77,
              "endLine": 77,
              "startColumn": 5,
              "endColumn": 14,
              "codeElementType": "ANNOTATION",
              "description": "added annotation",
              "codeElement": "@Override"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 74,
              "endLine": 81,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with added annotation",
              "codeElement": "public isEmpty() : boolean"
            }
          ]
        },
        {
          "type": "Add Method Annotation",
          "description": "Add Method Annotation @Override in method public size() : int from class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 99,
              "endLine": 106,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public size() : int"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 86,
              "endLine": 86,
              "startColumn": 5,
              "endColumn": 14,
              "codeElementType": "ANNOTATION",
              "description": "added annotation",
              "codeElement": "@Override"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 83,
              "endLine": 90,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with added annotation",
              "codeElement": "public size() : int"
            }
          ]
        },
        {
          "type": "Change Return Type",
          "description": "Change Return Type Iterator<E> to NodeIterator<E> in method public iterator() : NodeIterator<E> from class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 55,
              "endLine": 55,
              "startColumn": 12,
              "endColumn": 23,
              "codeElementType": "TYPE",
              "description": "original return type",
              "codeElement": "Iterator<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 51,
              "endLine": 57,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public iterator() : Iterator<E>"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 1021,
              "endLine": 1021,
              "startColumn": 12,
              "endColumn": 27,
              "codeElementType": "TYPE",
              "description": "changed return type",
              "codeElement": "NodeIterator<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 1017,
              "endLine": 1024,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with changed return type",
              "codeElement": "public iterator() : NodeIterator<E>"
            }
          ]
        },
        {
          "type": "Change Return Type",
          "description": "Change Return Type ListIterator<E> to ListNodeIterator<E> in method public listIterator() : ListNodeIterator<E> from class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 64,
              "endLine": 64,
              "startColumn": 12,
              "endColumn": 27,
              "codeElementType": "TYPE",
              "description": "original return type",
              "codeElement": "ListIterator<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 59,
              "endLine": 66,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public listIterator() : ListIterator<E>"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 1030,
              "endLine": 1030,
              "startColumn": 12,
              "endColumn": 31,
              "codeElementType": "TYPE",
              "description": "changed return type",
              "codeElement": "ListNodeIterator<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 1026,
              "endLine": 1033,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with changed return type",
              "codeElement": "public listIterator() : ListNodeIterator<E>"
            }
          ]
        },
        {
          "type": "Add Method Annotation",
          "description": "Add Method Annotation @Override in method public listIterator() : ListNodeIterator<E> from class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 59,
              "endLine": 66,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public listIterator() : ListIterator<E>"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 1029,
              "endLine": 1029,
              "startColumn": 5,
              "endColumn": 14,
              "codeElementType": "ANNOTATION",
              "description": "added annotation",
              "codeElement": "@Override"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 1026,
              "endLine": 1033,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with added annotation",
              "codeElement": "public listIterator() : ListNodeIterator<E>"
            }
          ]
        },
        {
          "type": "Change Return Type",
          "description": "Change Return Type ListNode<E> to void in method public addLast(e E) : void from class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 189,
              "endLine": 189,
              "startColumn": 12,
              "endColumn": 23,
              "codeElementType": "TYPE",
              "description": "original return type",
              "codeElement": "ListNode<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 182,
              "endLine": 199,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public addLast(value E) : ListNode<E>"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 670,
              "endLine": 670,
              "startColumn": 12,
              "endColumn": 16,
              "codeElementType": "TYPE",
              "description": "changed return type",
              "codeElement": "void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 666,
              "endLine": 673,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with changed return type",
              "codeElement": "public addLast(e E) : void"
            }
          ]
        },
        {
          "type": "Add Method Annotation",
          "description": "Add Method Annotation @Override in method public addLast(e E) : void from class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 182,
              "endLine": 199,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public addLast(value E) : ListNode<E>"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 669,
              "endLine": 669,
              "startColumn": 5,
              "endColumn": 14,
              "codeElementType": "ANNOTATION",
              "description": "added annotation",
              "codeElement": "@Override"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 666,
              "endLine": 673,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with added annotation",
              "codeElement": "public addLast(e E) : void"
            }
          ]
        },
        {
          "type": "Change Return Type",
          "description": "Change Return Type ListNode<E> to void in method public addFirst(e E) : void from class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 208,
              "endLine": 208,
              "startColumn": 12,
              "endColumn": 23,
              "codeElementType": "TYPE",
              "description": "original return type",
              "codeElement": "ListNode<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 201,
              "endLine": 213,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public addFirst(value E) : ListNode<E>"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 661,
              "endLine": 661,
              "startColumn": 12,
              "endColumn": 16,
              "codeElementType": "TYPE",
              "description": "changed return type",
              "codeElement": "void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 657,
              "endLine": 664,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with changed return type",
              "codeElement": "public addFirst(e E) : void"
            }
          ]
        },
        {
          "type": "Add Method Annotation",
          "description": "Add Method Annotation @Override in method public addFirst(e E) : void from class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 201,
              "endLine": 213,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public addFirst(value E) : ListNode<E>"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 660,
              "endLine": 660,
              "startColumn": 5,
              "endColumn": 14,
              "codeElementType": "ANNOTATION",
              "description": "added annotation",
              "codeElement": "@Override"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 657,
              "endLine": 664,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with added annotation",
              "codeElement": "public addFirst(e E) : void"
            }
          ]
        },
        {
          "type": "Change Return Type",
          "description": "Change Return Type ListNode<E> to void in method public addNodeFirst(node ListNode<E>) : void from class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 115,
              "endLine": 115,
              "startColumn": 12,
              "endColumn": 23,
              "codeElementType": "TYPE",
              "description": "original return type",
              "codeElement": "ListNode<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 108,
              "endLine": 117,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public add(value E) : ListNode<E>"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 308,
              "endLine": 308,
              "startColumn": 12,
              "endColumn": 16,
              "codeElementType": "TYPE",
              "description": "changed return type",
              "codeElement": "void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 297,
              "endLine": 311,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with changed return type",
              "codeElement": "public addNodeFirst(node ListNode<E>) : void"
            }
          ]
        },
        {
          "type": "Change Parameter Type",
          "description": "Change Parameter Type value : E to node : ListNode<E> in method public addNodeFirst(node ListNode<E>) : void from class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 115,
              "endLine": 115,
              "startColumn": 28,
              "endColumn": 35,
              "codeElementType": "SINGLE_VARIABLE_DECLARATION",
              "description": "original variable declaration",
              "codeElement": "value : E"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 308,
              "endLine": 308,
              "startColumn": 30,
              "endColumn": 46,
              "codeElementType": "SINGLE_VARIABLE_DECLARATION",
              "description": "changed-type variable declaration",
              "codeElement": "node : ListNode<E>"
            }
          ]
        },
        {
          "type": "Change Parameter Type",
          "description": "Change Parameter Type node : ListNode<E> to node : ListNodeImpl<E> in method private unlink(node ListNodeImpl<E>) : boolean from class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 221,
              "endLine": 221,
              "startColumn": 24,
              "endColumn": 40,
              "codeElementType": "SINGLE_VARIABLE_DECLARATION",
              "description": "original variable declaration",
              "codeElement": "node : ListNode<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 225,
              "endLine": 227,
              "startColumn": 13,
              "endColumn": 14,
              "codeElementType": "IF_STATEMENT",
              "description": "statement referencing the original variable",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 241,
              "endLine": 241,
              "startColumn": 28,
              "endColumn": 48,
              "codeElementType": "SINGLE_VARIABLE_DECLARATION",
              "description": "changed-type variable declaration",
              "codeElement": "node : ListNodeImpl<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 252,
              "endLine": 254,
              "startColumn": 17,
              "endColumn": 18,
              "codeElementType": "IF_STATEMENT",
              "description": "statement referencing the variable with changed type",
              "codeElement": null
            }
          ]
        },
        {
          "type": "Change Return Type",
          "description": "Change Return Type void to boolean in method private unlink(node ListNodeImpl<E>) : boolean from class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 221,
              "endLine": 221,
              "startColumn": 12,
              "endColumn": 16,
              "codeElementType": "TYPE",
              "description": "original return type",
              "codeElement": "void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 215,
              "endLine": 232,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public remove(node ListNode<E>) : void"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 241,
              "endLine": 241,
              "startColumn": 13,
              "endColumn": 20,
              "codeElementType": "TYPE",
              "description": "changed return type",
              "codeElement": "boolean"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 240,
              "endLine": 259,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with changed return type",
              "codeElement": "private unlink(node ListNodeImpl<E>) : boolean"
            }
          ]
        },
        {
          "type": "Change Method Access Modifier",
          "description": "Change Method Access Modifier public to private in method private unlink(node ListNodeImpl<E>) : boolean from class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 215,
              "endLine": 232,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public remove(node ListNode<E>) : void"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 240,
              "endLine": 259,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with changed access modifier",
              "codeElement": "private unlink(node ListNodeImpl<E>) : boolean"
            }
          ]
        },
        {
          "type": "Change Return Type",
          "description": "Change Return Type E to ListNode<E> in method public getLastNode() : ListNode<E> from class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 251,
              "endLine": 251,
              "startColumn": 12,
              "endColumn": 13,
              "codeElementType": "TYPE",
              "description": "original return type",
              "codeElement": "E"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 246,
              "endLine": 256,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public getLastElement() : E"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 382,
              "endLine": 382,
              "startColumn": 12,
              "endColumn": 23,
              "codeElementType": "TYPE",
              "description": "changed return type",
              "codeElement": "ListNode<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 373,
              "endLine": 388,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with changed return type",
              "codeElement": "public getLastNode() : ListNode<E>"
            }
          ]
        },
        {
          "type": "Change Return Type",
          "description": "Change Return Type ListNode<E> to E in method public get(index int) : E from class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 269,
              "endLine": 269,
              "startColumn": 12,
              "endColumn": 23,
              "codeElementType": "TYPE",
              "description": "original return type",
              "codeElement": "ListNode<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 258,
              "endLine": 277,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public getNode(element E) : ListNode<E>"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 639,
              "endLine": 639,
              "startColumn": 12,
              "endColumn": 13,
              "codeElementType": "TYPE",
              "description": "changed return type",
              "codeElement": "E"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 635,
              "endLine": 642,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with changed return type",
              "codeElement": "public get(index int) : E"
            }
          ]
        },
        {
          "type": "Change Parameter Type",
          "description": "Change Parameter Type element : E to index : int in method public get(index int) : E from class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 269,
              "endLine": 269,
              "startColumn": 32,
              "endColumn": 41,
              "codeElementType": "SINGLE_VARIABLE_DECLARATION",
              "description": "original variable declaration",
              "codeElement": "element : E"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 639,
              "endLine": 639,
              "startColumn": 18,
              "endColumn": 27,
              "codeElementType": "SINGLE_VARIABLE_DECLARATION",
              "description": "changed-type variable declaration",
              "codeElement": "index : int"
            }
          ]
        },
        {
          "type": "Add Method Annotation",
          "description": "Add Method Annotation @Override in method public get(index int) : E from class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 258,
              "endLine": 277,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public getNode(element E) : ListNode<E>"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 638,
              "endLine": 638,
              "startColumn": 5,
              "endColumn": 14,
              "codeElementType": "ANNOTATION",
              "description": "added annotation",
              "codeElement": "@Override"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 635,
              "endLine": 642,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with added annotation",
              "codeElement": "public get(index int) : E"
            }
          ]
        },
        {
          "type": "Change Return Type",
          "description": "Change Return Type void to boolean in method private removeListNode(node ListNodeImpl<E>) : boolean from class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 284,
              "endLine": 284,
              "startColumn": 13,
              "endColumn": 17,
              "codeElementType": "TYPE",
              "description": "original return type",
              "codeElement": "void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 279,
              "endLine": 290,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "private unlink(target ListNode<E>) : void"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 168,
              "endLine": 168,
              "startColumn": 13,
              "endColumn": 20,
              "codeElementType": "TYPE",
              "description": "changed return type",
              "codeElement": "boolean"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 156,
              "endLine": 181,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with changed return type",
              "codeElement": "private removeListNode(node ListNodeImpl<E>) : boolean"
            }
          ]
        },
        {
          "type": "Change Parameter Type",
          "description": "Change Parameter Type target : ListNode<E> to node : ListNodeImpl<E> in method private removeListNode(node ListNodeImpl<E>) : boolean from class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 284,
              "endLine": 284,
              "startColumn": 25,
              "endColumn": 43,
              "codeElementType": "SINGLE_VARIABLE_DECLARATION",
              "description": "original variable declaration",
              "codeElement": "target : ListNode<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 286,
              "endLine": 286,
              "startColumn": 9,
              "endColumn": 40,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "statement referencing the original variable",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 287,
              "endLine": 287,
              "startColumn": 9,
              "endColumn": 40,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "statement referencing the original variable",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 289,
              "endLine": 289,
              "startColumn": 9,
              "endColumn": 42,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "statement referencing the original variable",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 168,
              "endLine": 168,
              "startColumn": 36,
              "endColumn": 56,
              "codeElementType": "SINGLE_VARIABLE_DECLARATION",
              "description": "changed-type variable declaration",
              "codeElement": "node : ListNodeImpl<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 173,
              "endLine": 173,
              "startColumn": 13,
              "endColumn": 30,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "statement referencing the variable with changed type",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 174,
              "endLine": 174,
              "startColumn": 13,
              "endColumn": 30,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "statement referencing the variable with changed type",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 172,
              "endLine": 172,
              "startColumn": 13,
              "endColumn": 30,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "statement referencing the variable with changed type",
              "codeElement": null
            }
          ]
        },
        {
          "type": "Change Parameter Type",
          "description": "Change Parameter Type target : ListNode<E> to successor : ListNodeImpl<E> in method private link(predecessor ListNodeImpl<E>, successor ListNodeImpl<E>) : void from class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 298,
              "endLine": 298,
              "startColumn": 47,
              "endColumn": 65,
              "codeElementType": "SINGLE_VARIABLE_DECLARATION",
              "description": "original variable declaration",
              "codeElement": "target : ListNode<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 301,
              "endLine": 301,
              "startColumn": 9,
              "endColumn": 33,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "statement referencing the original variable",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 300,
              "endLine": 300,
              "startColumn": 9,
              "endColumn": 33,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "statement referencing the original variable",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 190,
              "endLine": 190,
              "startColumn": 52,
              "endColumn": 77,
              "codeElementType": "SINGLE_VARIABLE_DECLARATION",
              "description": "changed-type variable declaration",
              "codeElement": "successor : ListNodeImpl<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 192,
              "endLine": 192,
              "startColumn": 9,
              "endColumn": 38,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "statement referencing the variable with changed type",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 193,
              "endLine": 193,
              "startColumn": 9,
              "endColumn": 38,
              "codeElementType": "EXPRESSION_STATEMENT",
              "description": "statement referencing the variable with changed type",
              "codeElement": null
            }
          ]
        },
        {
          "type": "Change Method Access Modifier",
          "description": "Change Method Access Modifier package to private in method private ListNodeIteratorImpl(startIndex int, startNode ListNodeImpl<E>) from class org.jgrapht.util.DoublyLinkedList.ListNodeIteratorImpl",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 402,
              "endLine": 407,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "package ListIteratorImpl(start ListNode<E>, reversed boolean)"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 1164,
              "endLine": 1168,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with changed access modifier",
              "codeElement": "private ListNodeIteratorImpl(startIndex int, startNode ListNodeImpl<E>)"
            }
          ]
        },
        {
          "type": "Change Return Type",
          "description": "Change Return Type ListNode<E> to ListNodeImpl<E> in method public nextNode() : ListNodeImpl<E> from class org.jgrapht.util.DoublyLinkedList.ListNodeIteratorImpl",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 421,
              "endLine": 421,
              "startColumn": 16,
              "endColumn": 27,
              "codeElementType": "TYPE",
              "description": "original return type",
              "codeElement": "ListNode<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 417,
              "endLine": 436,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public nextNode() : ListNode<E>"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 1210,
              "endLine": 1210,
              "startColumn": 16,
              "endColumn": 31,
              "codeElementType": "TYPE",
              "description": "changed return type",
              "codeElement": "ListNodeImpl<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 1206,
              "endLine": 1221,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with changed return type",
              "codeElement": "public nextNode() : ListNodeImpl<E>"
            }
          ]
        },
        {
          "type": "Add Parameter",
          "description": "Add Parameter startIndex : int in method private ListNodeIteratorImpl(startIndex int, startNode ListNodeImpl<E>) from class org.jgrapht.util.DoublyLinkedList.ListNodeIteratorImpl",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 402,
              "endLine": 407,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "package ListIteratorImpl(start ListNode<E>, reversed boolean)"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 1164,
              "endLine": 1164,
              "startColumn": 38,
              "endColumn": 52,
              "codeElementType": "SINGLE_VARIABLE_DECLARATION",
              "description": "added parameter",
              "codeElement": "startIndex : int"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 1164,
              "endLine": 1168,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with added parameter",
              "codeElement": "private ListNodeIteratorImpl(startIndex int, startNode ListNodeImpl<E>)"
            }
          ]
        },
        {
          "type": "Add Parameter",
          "description": "Add Parameter startNode : ListNodeImpl<E> in method private ListNodeIteratorImpl(startIndex int, startNode ListNodeImpl<E>) from class org.jgrapht.util.DoublyLinkedList.ListNodeIteratorImpl",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 402,
              "endLine": 407,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "package ListIteratorImpl(start ListNode<E>, reversed boolean)"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 1164,
              "endLine": 1164,
              "startColumn": 54,
              "endColumn": 79,
              "codeElementType": "SINGLE_VARIABLE_DECLARATION",
              "description": "added parameter",
              "codeElement": "startNode : ListNodeImpl<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 1164,
              "endLine": 1168,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with added parameter",
              "codeElement": "private ListNodeIteratorImpl(startIndex int, startNode ListNodeImpl<E>)"
            }
          ]
        },
        {
          "type": "Remove Parameter",
          "description": "Remove Parameter start : ListNode<E> in method package ListIteratorImpl(start ListNode<E>, reversed boolean) from class org.jgrapht.util.DoublyLinkedList.ListIteratorImpl",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 402,
              "endLine": 402,
              "startColumn": 26,
              "endColumn": 43,
              "codeElementType": "SINGLE_VARIABLE_DECLARATION",
              "description": "removed parameter",
              "codeElement": "start : ListNode<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 402,
              "endLine": 407,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "package ListIteratorImpl(start ListNode<E>, reversed boolean)"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 1164,
              "endLine": 1168,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with removed parameter",
              "codeElement": "private ListNodeIteratorImpl(startIndex int, startNode ListNodeImpl<E>)"
            }
          ]
        },
        {
          "type": "Remove Parameter",
          "description": "Remove Parameter reversed : boolean in method package ListIteratorImpl(start ListNode<E>, reversed boolean) from class org.jgrapht.util.DoublyLinkedList.ListIteratorImpl",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 402,
              "endLine": 402,
              "startColumn": 45,
              "endColumn": 61,
              "codeElementType": "SINGLE_VARIABLE_DECLARATION",
              "description": "removed parameter",
              "codeElement": "reversed : boolean"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 402,
              "endLine": 407,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "package ListIteratorImpl(start ListNode<E>, reversed boolean)"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 1164,
              "endLine": 1168,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with removed parameter",
              "codeElement": "private ListNodeIteratorImpl(startIndex int, startNode ListNodeImpl<E>)"
            }
          ]
        },
        {
          "type": "Push Down Method",
          "description": "Push Down Method public toString() : String from class org.jgrapht.util.DoublyLinkedList.ListNode to public toString() : String from class org.jgrapht.util.DoublyLinkedList.ListNodeImpl",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 468,
              "endLine": 474,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public toString() : String"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 1397,
              "endLine": 1408,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "pushed down method declaration",
              "codeElement": "public toString() : String"
            }
          ]
        },
        {
          "type": "Push Down Method",
          "description": "Push Down Method public getValue() : V from class org.jgrapht.util.DoublyLinkedList.ListNode to public getValue() : V from class org.jgrapht.util.DoublyLinkedList.ListNodeImpl",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 476,
              "endLine": 483,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public getValue() : V"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 1410,
              "endLine": 1417,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "pushed down method declaration",
              "codeElement": "public getValue() : V"
            }
          ]
        },
        {
          "type": "Add Method Annotation",
          "description": "Add Method Annotation @Override in method public getValue() : V from class org.jgrapht.util.DoublyLinkedList.ListNodeImpl",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 476,
              "endLine": 483,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public getValue() : V"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 1413,
              "endLine": 1413,
              "startColumn": 9,
              "endColumn": 18,
              "codeElementType": "ANNOTATION",
              "description": "added annotation",
              "codeElement": "@Override"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 1410,
              "endLine": 1417,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with added annotation",
              "codeElement": "public getValue() : V"
            }
          ]
        },
        {
          "type": "Push Down Method",
          "description": "Push Down Method package ListNode(value V) from class org.jgrapht.util.DoublyLinkedList.ListNode to package ListNodeImpl(value V) from class org.jgrapht.util.DoublyLinkedList.ListNodeImpl",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 459,
              "endLine": 466,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "package ListNode(value V)"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 1387,
              "endLine": 1395,
              "startColumn": 9,
              "endColumn": 10,
              "codeElementType": "METHOD_DECLARATION",
              "description": "pushed down method declaration",
              "codeElement": "package ListNodeImpl(value V)"
            }
          ]
        },
        {
          "type": "Rename Method",
          "description": "Rename Method public reverseIteratorFrom(element E) : Iterator<E> renamed to public reverseCircularIterator(firstElement E) : NodeIterator<E> in class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 68,
              "endLine": 88,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public reverseIteratorFrom(element E) : Iterator<E>"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 982,
              "endLine": 1006,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "renamed method declaration",
              "codeElement": "public reverseCircularIterator(firstElement E) : NodeIterator<E>"
            }
          ]
        },
        {
          "type": "Change Return Type",
          "description": "Change Return Type Iterator<E> to NodeIterator<E> in method public reverseCircularIterator(firstElement E) : NodeIterator<E> from class org.jgrapht.util.DoublyLinkedList",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 82,
              "endLine": 82,
              "startColumn": 12,
              "endColumn": 23,
              "codeElementType": "TYPE",
              "description": "original return type",
              "codeElement": "Iterator<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 68,
              "endLine": 88,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "public reverseIteratorFrom(element E) : Iterator<E>"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 999,
              "endLine": 999,
              "startColumn": 12,
              "endColumn": 27,
              "codeElementType": "TYPE",
              "description": "changed return type",
              "codeElement": "NodeIterator<E>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList.java",
              "startLine": 982,
              "endLine": 1006,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with changed return type",
              "codeElement": "public reverseCircularIterator(firstElement E) : NodeIterator<E>"
            }
          ]
        }
      ]
    },
    {
      "repository": "https://github.com/jgrapht/jgrapht.git",
      "sha1": "3ce95cf84e630fbb3aaf3dfd63fe4ae584496024",
      "url": "https://github.com/jgrapht/jgrapht/commit/3ce95cf84e630fbb3aaf3dfd63fe4ae584496024",
      "refactorings": [
        {
          "type": "Extract Method",
          "description": "Extract Method private checkNodes(a V, b V) : void extracted from public getLCA(a V, b V) : V in class org.jgrapht.alg.lca.NaiveLCAFinder",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/lca/NaiveLCAFinder.java",
              "startLine": 104,
              "endLine": 119,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration before extraction",
              "codeElement": "public getLCA(a V, b V) : V"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/lca/NaiveLCAFinder.java",
              "startLine": 111,
              "endLine": 111,
              "startColumn": 13,
              "endColumn": 72,
              "codeElementType": "THROW_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/lca/NaiveLCAFinder.java",
              "startLine": 114,
              "endLine": 114,
              "startColumn": 13,
              "endColumn": 72,
              "codeElementType": "THROW_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/lca/NaiveLCAFinder.java",
              "startLine": 110,
              "endLine": 111,
              "startColumn": 9,
              "endColumn": 72,
              "codeElementType": "IF_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/lca/NaiveLCAFinder.java",
              "startLine": 113,
              "endLine": 114,
              "startColumn": 9,
              "endColumn": 72,
              "codeElementType": "IF_STATEMENT",
              "description": "extracted code from source method declaration",
              "codeElement": null
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/lca/NaiveLCAFinder.java",
              "startLine": 197,
              "endLine": 209,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "extracted method declaration",
              "codeElement": "private checkNodes(a V, b V) : void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/lca/NaiveLCAFinder.java",
              "startLine": 205,
              "endLine": 205,
              "startColumn": 13,
              "endColumn": 72,
              "codeElementType": "THROW_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/lca/NaiveLCAFinder.java",
              "startLine": 208,
              "endLine": 208,
              "startColumn": 13,
              "endColumn": 72,
              "codeElementType": "THROW_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/lca/NaiveLCAFinder.java",
              "startLine": 204,
              "endLine": 205,
              "startColumn": 9,
              "endColumn": 72,
              "codeElementType": "IF_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/lca/NaiveLCAFinder.java",
              "startLine": 207,
              "endLine": 208,
              "startColumn": 9,
              "endColumn": 72,
              "codeElementType": "IF_STATEMENT",
              "description": "extracted code to extracted method declaration",
              "codeElement": null
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/lca/NaiveLCAFinder.java",
              "startLine": 104,
              "endLine": 117,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "source method declaration after extraction",
              "codeElement": "public getLCA(a V, b V) : V"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/lca/NaiveLCAFinder.java",
              "startLine": 110,
              "endLine": 110,
              "startColumn": 9,
              "endColumn": 25,
              "codeElementType": "METHOD_INVOCATION",
              "description": "extracted method invocation",
              "codeElement": "checkNodes(a,b)"
            }
          ]
        },
        {
          "type": "Change Return Type",
          "description": "Change Return Type void to List<Set<V>> in method private doubleBfs(a V, b V) : List<Set<V>> from class org.jgrapht.alg.lca.NaiveLCAFinder",
          "leftSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/lca/NaiveLCAFinder.java",
              "startLine": 173,
              "endLine": 173,
              "startColumn": 13,
              "endColumn": 17,
              "codeElementType": "TYPE",
              "description": "original return type",
              "codeElement": "void"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/lca/NaiveLCAFinder.java",
              "startLine": 168,
              "endLine": 203,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "original method declaration",
              "codeElement": "private doubleBfs(a V, b V, visitedSets Set<V>[]) : void"
            }
          ],
          "rightSideLocations": [
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/lca/NaiveLCAFinder.java",
              "startLine": 166,
              "endLine": 166,
              "startColumn": 13,
              "endColumn": 25,
              "codeElementType": "TYPE",
              "description": "changed return type",
              "codeElement": "List<Set<V>>"
            },
            {
              "filePath": "jgrapht-core/src/main/java/org/jgrapht/alg/lca/NaiveLCAFinder.java",
              "startLine": 161,
              "endLine": 195,
              "startColumn": 5,
              "endColumn": 6,
              "codeElementType": "METHOD_DECLARATION",
              "description": "method declaration with changed return type",
              "codeElement": "private doubleBfs(a V, b V) : List<Set<V>>"
            }
          ]
        }
      ]
    }
  ]
}